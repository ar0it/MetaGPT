{
    "stdout": "####################################################################################\nPredicting metadata for OME\nChildren: <class 'list'>\ntetset\nPredicting metadata for Project\nTreeNode(model=Project, children=[TreeNode(model=DatasetRef, children=[]), TreeNode(model=AnnotationRef, children=[])])\n####################################################################################\nPredicting metadata for Project\nChildren: <class 'list'>\ntetset\nPredicting metadata for DatasetRef\nTreeNode(model=DatasetRef, children=[])\n####################################################################################\nPredicting metadata for DatasetRef\nChildren: <class 'list'>\nPredicting metadata for DatasetRef, self.object=id='Dataset:0', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for AnnotationRef\nTreeNode(model=AnnotationRef, children=[])\n####################################################################################\nPredicting metadata for AnnotationRef\nChildren: <class 'list'>\nPredicting metadata for AnnotationRef, self.object=id='Annotation:0', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for Project, self.object=id='Project:0' dataset_refs=[{'id': 'Dataset:0'}] annotation_refs=[{'id': 'Annotation:0'}], required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Dataset\nTreeNode(model=Dataset, children=[TreeNode(model=ImageRef, children=[])])\n####################################################################################\nPredicting metadata for Dataset\nChildren: <class 'list'>\ntetset\nPredicting metadata for ImageRef\nTreeNode(model=ImageRef, children=[])\n####################################################################################\nPredicting metadata for ImageRef\nChildren: <class 'list'>\nPredicting metadata for ImageRef, self.object=id='Image:0', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for Dataset, self.object=id='Dataset:1' image_refs=[{'id': 'Image:0'}], required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Folder\nTreeNode(model=Folder, children=[TreeNode(model=FolderRef, children=[]), TreeNode(model=ROIRef, children=[])])\n####################################################################################\nPredicting metadata for Folder\nChildren: <class 'list'>\ntetset\nPredicting metadata for FolderRef\nTreeNode(model=FolderRef, children=[])\n####################################################################################\nPredicting metadata for FolderRef\nChildren: <class 'list'>\nPredicting metadata for FolderRef, self.object=id='Folder:0', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for ROIRef\nTreeNode(model=ROIRef, children=[])\n####################################################################################\nPredicting metadata for ROIRef\nChildren: <class 'list'>\nPredicting metadata for ROIRef, self.object=id='lsid:0', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for Folder, self.object=id='Folder:1' folder_refs=[{'id': 'Folder:0'}] roi_refs=[{'id': 'lsid:0'}], required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Experiment\nTreeNode(model=Experiment, children=[TreeNode(model=MicrobeamManipulation, children=[TreeNode(model=ExperimenterRef, children=[]), TreeNode(model=LightSourceSettings, children=[])])])\n####################################################################################\nPredicting metadata for Experiment\nChildren: <class 'list'>\ntetset\nPredicting metadata for MicrobeamManipulation\nTreeNode(model=MicrobeamManipulation, children=[TreeNode(model=ExperimenterRef, children=[]), TreeNode(model=LightSourceSettings, children=[])])\n####################################################################################\nPredicting metadata for MicrobeamManipulation\nChildren: <class 'list'>\ntetset\nPredicting metadata for ExperimenterRef\nTreeNode(model=ExperimenterRef, children=[])\n####################################################################################\nPredicting metadata for ExperimenterRef\nChildren: <class 'list'>\nPredicting metadata for ExperimenterRef, self.object=id='Experimenter:0', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for LightSourceSettings\nTreeNode(model=LightSourceSettings, children=[])\n####################################################################################\nPredicting metadata for LightSourceSettings\nChildren: <class 'list'>\nPredicting metadata for LightSourceSettings, self.object=id='LightSource:0', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for MicrobeamManipulation, self.object=MicrobeamManipulation=None, required=['experimenter_ref']\nCurrently running application: OME Metadata Store\nPredicting metadata for Experiment, self.object=id='Experiment:0', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Plate\nTreeNode(model=Plate, children=[TreeNode(model=Well, children=[TreeNode(model=WellSample, children=[])]), TreeNode(model=PlateAcquisition, children=[TreeNode(model=WellSampleRef, children=[])])])\n####################################################################################\nPredicting metadata for Plate\nChildren: <class 'list'>\ntetset\nPredicting metadata for Well\nTreeNode(model=Well, children=[TreeNode(model=WellSample, children=[])])\n####################################################################################\nPredicting metadata for Well\nChildren: <class 'list'>\ntetset\nPredicting metadata for WellSample\nTreeNode(model=WellSample, children=[])\n####################################################################################\nPredicting metadata for WellSample\nChildren: <class 'list'>\nPredicting metadata for WellSample, self.object=WellSample=None, required=['index']\nCurrently running application: OME Metadata Store\nPredicting metadata for Well, self.object=Well=None, required=['column', 'row']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for PlateAcquisition\nTreeNode(model=PlateAcquisition, children=[TreeNode(model=WellSampleRef, children=[])])\n####################################################################################\nPredicting metadata for PlateAcquisition\nChildren: <class 'list'>\ntetset\nPredicting metadata for WellSampleRef\nTreeNode(model=WellSampleRef, children=[])\n####################################################################################\nPredicting metadata for WellSampleRef\nChildren: <class 'list'>\nPredicting metadata for WellSampleRef, self.object=id='WellSample:1', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for PlateAcquisition, self.object=id='PlateAcquisition:0' well_sample_refs=[{'id': 'WellSample:1'}], required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for Plate, self.object=id='Plate:0' plate_acquisitions=[{'well_sample_refs': [{'id': 'WellSample:1'}], 'id': 'PlateAcquisition:0'}], required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Screen\nTreeNode(model=Screen, children=[TreeNode(model=Reagent, children=[]), TreeNode(model=PlateRef, children=[])])\n####################################################################################\nPredicting metadata for Screen\nChildren: <class 'list'>\ntetset\nPredicting metadata for Reagent\nTreeNode(model=Reagent, children=[])\n####################################################################################\nPredicting metadata for Reagent\nChildren: <class 'list'>\nPredicting metadata for Reagent, self.object=id='Reagent:0', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for PlateRef\nTreeNode(model=PlateRef, children=[])\n####################################################################################\nPredicting metadata for PlateRef\nChildren: <class 'list'>\nPredicting metadata for PlateRef, self.object=id='Plate:1', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for Screen, self.object=id='Screen:0' reagents=[{'id': 'Reagent:0'}], required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Experimenter\nTreeNode(model=Experimenter, children=[])\n####################################################################################\nPredicting metadata for Experimenter\nChildren: <class 'list'>\nPredicting metadata for Experimenter, self.object=id='Experimenter:1', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for ExperimenterGroup\nTreeNode(model=ExperimenterGroup, children=[TreeNode(model=Leader, children=[])])\n####################################################################################\nPredicting metadata for ExperimenterGroup\nChildren: <class 'list'>\ntetset\nPredicting metadata for Leader\nTreeNode(model=Leader, children=[])\n####################################################################################\nPredicting metadata for Leader\nChildren: <class 'list'>\nPredicting metadata for Leader, self.object=id='Experimenter:2', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for ExperimenterGroup, self.object=id='ExperimenterGroup:0' leaders=[{'id': 'Experimenter:2'}], required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Instrument\nTreeNode(model=Instrument, children=[TreeNode(model=GenericExcitationSource, children=[]), TreeNode(model=LightEmittingDiode, children=[]), TreeNode(model=Filament, children=[]), TreeNode(model=Arc, children=[]), TreeNode(model=Laser, children=[]), TreeNode(model=Detector, children=[]), TreeNode(model=Objective, children=[]), TreeNode(model=FilterSet, children=[TreeNode(model=FilterRef, children=[])]), TreeNode(model=Filter, children=[]), TreeNode(model=Dichroic, children=[])])\n####################################################################################\nPredicting metadata for Instrument\nChildren: <class 'list'>\ntetset\nPredicting metadata for GenericExcitationSource\nTreeNode(model=GenericExcitationSource, children=[])\n####################################################################################\nPredicting metadata for GenericExcitationSource\nChildren: <class 'list'>\nPredicting metadata for GenericExcitationSource, self.object=id='LightSource:1', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for LightEmittingDiode\nTreeNode(model=LightEmittingDiode, children=[])\n####################################################################################\nPredicting metadata for LightEmittingDiode\nChildren: <class 'list'>\nPredicting metadata for LightEmittingDiode, self.object=id='LightSource:2', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Filament\nTreeNode(model=Filament, children=[])\n####################################################################################\nPredicting metadata for Filament\nChildren: <class 'list'>\nPredicting metadata for Filament, self.object=id='LightSource:3', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Arc\nTreeNode(model=Arc, children=[])\n####################################################################################\nPredicting metadata for Arc\nChildren: <class 'list'>\nPredicting metadata for Arc, self.object=id='LightSource:4', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Laser\nTreeNode(model=Laser, children=[])\n####################################################################################\nPredicting metadata for Laser\nChildren: <class 'list'>\nPredicting metadata for Laser, self.object=id='LightSource:5', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Detector\nTreeNode(model=Detector, children=[])\n####################################################################################\nPredicting metadata for Detector\nChildren: <class 'list'>\nPredicting metadata for Detector, self.object=id='Detector:0', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Objective\nTreeNode(model=Objective, children=[])\n####################################################################################\nPredicting metadata for Objective\nChildren: <class 'list'>\nPredicting metadata for Objective, self.object=id='Objective:0', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for FilterSet\nTreeNode(model=FilterSet, children=[TreeNode(model=FilterRef, children=[])])\n####################################################################################\nPredicting metadata for FilterSet\nChildren: <class 'list'>\ntetset\nPredicting metadata for FilterRef\nTreeNode(model=FilterRef, children=[])\n####################################################################################\nPredicting metadata for FilterRef\nChildren: <class 'list'>\nPredicting metadata for FilterRef, self.object=id='Filter:0', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for FilterSet, self.object=id='FilterSet:0' excitation_filters=[{'id': 'Filter:0'}] emission_filters=[{'id': 'Filter:0'}], required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Filter\nTreeNode(model=Filter, children=[])\n####################################################################################\nPredicting metadata for Filter\nChildren: <class 'list'>\nPredicting metadata for Filter, self.object=id='Filter:1', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Dichroic\nTreeNode(model=Dichroic, children=[])\n####################################################################################\nPredicting metadata for Dichroic\nChildren: <class 'list'>\nPredicting metadata for Dichroic, self.object=id='Dichroic:0', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for Instrument, self.object=id='Instrument:0' generic_excitation_sources=[{'id': 'LightSource:1', 'kind': 'genericexcitationsource'}] light_emitting_diodes=[{'id': 'LightSource:2', 'kind': 'lightemittingdiode'}] filaments=[{'id': 'LightSource:3', 'kind': 'filament'}] arcs=[{'id': 'LightSource:4', 'kind': 'arc'}] lasers=[{'id': 'LightSource:5', 'kind': 'laser'}] detectors=[{'id': 'Detector:0', 'kind': 'detector'}] objectives=[{'id': 'Objective:0', 'kind': 'objective'}] filter_sets=[{'excitation_filters': [{'id': 'Filter:0'}], 'emission_filters': [{'id': 'Filter:0'}], 'id': 'FilterSet:0', 'kind': 'filterset'}] filters=[{'id': 'Filter:1', 'kind': 'filter'}] dichroics=[{'id': 'Dichroic:0', 'kind': 'dichroic'}], required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Image\nTreeNode(model=Image, children=[TreeNode(model=Pixels, children=[TreeNode(model=Channel, children=[]), TreeNode(model=BinData, children=[]), TreeNode(model=TiffData, children=[]), TreeNode(model=Plane, children=[])]), TreeNode(model=MicrobeamManipulationRef, children=[])])\n####################################################################################\nPredicting metadata for Image\nChildren: <class 'list'>\ntetset\nPredicting metadata for Pixels\nTreeNode(model=Pixels, children=[TreeNode(model=Channel, children=[]), TreeNode(model=BinData, children=[]), TreeNode(model=TiffData, children=[]), TreeNode(model=Plane, children=[])])\n####################################################################################\nPredicting metadata for Pixels\nChildren: <class 'list'>\ntetset\nPredicting metadata for Channel\nTreeNode(model=Channel, children=[])\n####################################################################################\nPredicting metadata for Channel\nChildren: <class 'list'>\nPredicting metadata for Channel, self.object=id='Channel:0', required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for BinData\nTreeNode(model=BinData, children=[])\n####################################################################################\nPredicting metadata for BinData\nChildren: <class 'list'>\nPredicting metadata for BinData, self.object=BinData=None, required=['value', 'big_endian', 'length']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for TiffData\nTreeNode(model=TiffData, children=[])\n####################################################################################\nPredicting metadata for TiffData\nChildren: <class 'list'>\nPredicting metadata for TiffData, self.object=, required=[]\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Plane\nTreeNode(model=Plane, children=[])\n####################################################################################\nPredicting metadata for Plane\nChildren: <class 'list'>\nPredicting metadata for Plane, self.object=Plane=None, required=['the_z', 'the_t', 'the_c']\nCurrently running application: OME Metadata Store\nPredicting metadata for Pixels, self.object=Pixels=None, required=['dimension_order', 'type', 'size_x', 'size_y', 'size_z', 'size_c', 'size_t']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for MicrobeamManipulationRef\nTreeNode(model=MicrobeamManipulationRef, children=[])\n####################################################################################\nPredicting metadata for MicrobeamManipulationRef\nChildren: <class 'list'>\nPredicting metadata for MicrobeamManipulationRef, self.object=id='MicrobeamManipulation:1', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for Image, self.object=Image=None, required=['pixels']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for ROI\nTreeNode(model=ROI, children=[TreeNode(model=Union, children=[TreeNode(model=Label, children=[]), TreeNode(model=Polygon, children=[]), TreeNode(model=Polyline, children=[]), TreeNode(model=Line, children=[]), TreeNode(model=Ellipse, children=[]), TreeNode(model=Point, children=[]), TreeNode(model=Mask, children=[]), TreeNode(model=Rectangle, children=[])])])\n####################################################################################\nPredicting metadata for ROI\nChildren: <class 'list'>\ntetset\nPredicting metadata for Union\nTreeNode(model=Union, children=[TreeNode(model=Label, children=[]), TreeNode(model=Polygon, children=[]), TreeNode(model=Polyline, children=[]), TreeNode(model=Line, children=[]), TreeNode(model=Ellipse, children=[]), TreeNode(model=Point, children=[]), TreeNode(model=Mask, children=[]), TreeNode(model=Rectangle, children=[])])\n####################################################################################\nPredicting metadata for Union\nChildren: <class 'list'>\ntetset\nPredicting metadata for Label\nTreeNode(model=Label, children=[])\n####################################################################################\nPredicting metadata for Label\nChildren: <class 'list'>\nPredicting metadata for Label, self.object=Label=None, required=['x', 'y']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Polygon\nTreeNode(model=Polygon, children=[])\n####################################################################################\nPredicting metadata for Polygon\nChildren: <class 'list'>\nPredicting metadata for Polygon, self.object=Polygon=None, required=['points']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Polyline\nTreeNode(model=Polyline, children=[])\n####################################################################################\nPredicting metadata for Polyline\nChildren: <class 'list'>\nPredicting metadata for Polyline, self.object=Polyline=None, required=['points']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Line\nTreeNode(model=Line, children=[])\n####################################################################################\nPredicting metadata for Line\nChildren: <class 'list'>\nPredicting metadata for Line, self.object=Line=None, required=['x1', 'y1', 'x2', 'y2']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Ellipse\nTreeNode(model=Ellipse, children=[])\n####################################################################################\nPredicting metadata for Ellipse\nChildren: <class 'list'>\nPredicting metadata for Ellipse, self.object=Ellipse=None, required=['x', 'y', 'radius_x', 'radius_y']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Point\nTreeNode(model=Point, children=[])\n####################################################################################\nPredicting metadata for Point\nChildren: <class 'list'>\nPredicting metadata for Point, self.object=Point=None, required=['x', 'y']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Mask\nTreeNode(model=Mask, children=[])\n####################################################################################\nPredicting metadata for Mask\nChildren: <class 'list'>\nPredicting metadata for Mask, self.object=Mask=None, required=['bin_data', 'x', 'y', 'width', 'height']\nCurrently running application: OME Metadata Store\ntetset\nPredicting metadata for Rectangle\nTreeNode(model=Rectangle, children=[])\n####################################################################################\nPredicting metadata for Rectangle\nChildren: <class 'list'>\nPredicting metadata for Rectangle, self.object=Rectangle=None, required=['x', 'y', 'width', 'height']\nCurrently running application: OME Metadata Store\nPredicting metadata for Union, self.object=Union=None, required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for ROI, self.object=id='lsid:1', required=[]\nCurrently running application: OME Metadata Store\nPredicting metadata for OME, self.object=projects=[{'dataset_refs': [{'id': 'Dataset:0'}], 'annotation_refs': [{'id': 'Annotation:0'}], 'id': 'Project:0'}] datasets=[{'image_refs': [{'id': 'Image:0'}], 'id': 'Dataset:1'}] folders=[{'folder_refs': [{'id': 'Folder:0'}], 'roi_refs': [{'id': 'lsid:0'}], 'id': 'Folder:1'}] experiments=[{'id': 'Experiment:0'}] plates=[{'plate_acquisitions': [{'well_sample_refs': [{'id': 'WellSample:1'}], 'id': 'PlateAcquisition:0'}], 'id': 'Plate:0'}] screens=[{'reagents': [{'id': 'Reagent:0'}], 'id': 'Screen:0'}] experimenters=[{'id': 'Experimenter:1'}] experimenter_groups=[{'leaders': [{'id': 'Experimenter:2'}], 'id': 'ExperimenterGroup:0'}] instruments=[<1 field_type>] rois=[{'id': 'lsid:1'}], required=[]\nCurrently running application: OME Metadata Store\n",
    "stderr": "/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/pydantic/main.py:175: UserWarning: BinData length is non-zero but value is missing\n  self.__pydantic_validator__.validate_python(data, self_instance=self)\n/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/ome_types/_mixins/_ome.py:21: UserWarning: Reference to unknown ID: Dataset:0\n  self._link_refs()\n/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/ome_types/_mixins/_ome.py:21: UserWarning: Reference to unknown ID: Annotation:0\n  self._link_refs()\n/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/ome_types/_mixins/_ome.py:21: UserWarning: Reference to unknown ID: Image:0\n  self._link_refs()\n/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/ome_types/_mixins/_ome.py:21: UserWarning: Reference to unknown ID: Folder:0\n  self._link_refs()\n/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/ome_types/_mixins/_ome.py:21: UserWarning: Reference to unknown ID: lsid:0\n  self._link_refs()\n/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/ome_types/_mixins/_ome.py:21: UserWarning: Reference to unknown ID: WellSample:1\n  self._link_refs()\n/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/ome_types/_mixins/_ome.py:21: UserWarning: Reference to unknown ID: Experimenter:2\n  self._link_refs()\n/home/aaron/mambaforge/envs/metagpt/lib/python3.9/site-packages/ome_types/_mixins/_ome.py:21: UserWarning: Reference to unknown ID: Filter:0\n  self._link_refs()\n"
}