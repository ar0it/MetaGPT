{
    "$defs": {
        "AffineTransform": {
            "description": "A matrix used to transform the shape.\n\n⎡ A00, A01, A02 ⎤ ⎢ A10, A11, A12 ⎥ ⎣ 0,   0,   1   ⎦",
            "properties": {
                "a00": {
                    "name": "A00",
                    "required": true,
                    "title": "A00",
                    "type": "Attribute"
                },
                "a10": {
                    "name": "A10",
                    "required": true,
                    "title": "A10",
                    "type": "Attribute"
                },
                "a01": {
                    "name": "A01",
                    "required": true,
                    "title": "A01",
                    "type": "Attribute"
                },
                "a11": {
                    "name": "A11",
                    "required": true,
                    "title": "A11",
                    "type": "Attribute"
                },
                "a02": {
                    "name": "A02",
                    "required": true,
                    "title": "A02",
                    "type": "Attribute"
                },
                "a12": {
                    "name": "A12",
                    "required": true,
                    "title": "A12",
                    "type": "Attribute"
                }
            },
            "required": [
                "a00",
                "a10",
                "a01",
                "a11",
                "a02",
                "a12"
            ],
            "title": "AffineTransform",
            "type": "object"
        },
        "AnnotationRef": {
            "description": "The AnnotationRef element is a reference to an element derived from the\nCommonAnnotation element.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "AnnotationRef",
            "type": "object"
        },
        "Arc": {
            "description": "The Arc element is used to describe various kinds of Arc lamps - Hg, Xe, HgXe.\nThe Power of the Arc is now stored in the LightSource.\n\nAttributes\n----------\ntype : None | Arc_Type\n    The type of Arc lamp.",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "power": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Power",
                    "title": "Power",
                    "type": "Attribute"
                },
                "power_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsPower"
                        }
                    ],
                    "default": "mW",
                    "name": "PowerUnit",
                    "type": "Attribute"
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Arc_Type"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Type",
                    "type": "Attribute"
                }
            },
            "title": "Arc",
            "type": "object"
        },
        "Arc_Type": {
            "enum": [
                "Hg",
                "Xe",
                "HgXe",
                "Other"
            ],
            "title": "Arc_Type",
            "type": "string"
        },
        "BinData": {
            "description": "The contents of this element are base64-encoded.\n\nThese are not CDATA sections, just a base64 stream.\n\nAttributes\n----------\nvalue : bytes\n    (The BinData value).\ncompression : BinData_Compression\n    Specifies the compression scheme used to encode the data.\nbig_endian : bool\n    This is true if the binary data was written in BigEndian order. This is\n    dependent on the system architecture of the machine that wrote the pixels.\n    True for essentially all modern CPUs other than Intel and Alpha. All Binary\n    data must be written in the same endian order.\nlength : int\n    Character count attribute for the BinData field. This is the length of the\n    base-64 encoded block. It allows easy skipping of the block when parsing\n    the file. [unit:bytes]",
            "properties": {
                "value": {
                    "format": "base64",
                    "required": true,
                    "title": "Value",
                    "type": "string"
                },
                "compression": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/BinData_Compression"
                        }
                    ],
                    "default": "none",
                    "name": "Compression",
                    "type": "Attribute"
                },
                "big_endian": {
                    "name": "BigEndian",
                    "required": true,
                    "title": "Big Endian",
                    "type": "Attribute"
                },
                "length": {
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "Length",
                    "required": true,
                    "title": "Length",
                    "type": "Attribute"
                }
            },
            "required": [
                "value",
                "big_endian",
                "length"
            ],
            "title": "BinData",
            "type": "object"
        },
        "BinData_Compression": {
            "enum": [
                "zlib",
                "bzip2",
                "none"
            ],
            "title": "BinData_Compression",
            "type": "string"
        },
        "BinaryFile": {
            "description": "Describes a binary file.\n\nAttributes\n----------\nexternal : None | External\n    (The BinaryFile External).\nbin_data : None | BinData\n    (The BinaryFile BinData).\nfile_name : str\n    (The BinaryFile FileName).\nsize : int\n    Size of the uncompressed file. [unit:bytes]\nmime_type : None | str\n    (The BinaryFile MIMEType).",
            "properties": {
                "external": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/External"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "External",
                    "type": "Element"
                },
                "bin_data": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/BinData"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "BinData",
                    "type": "Element"
                },
                "file_name": {
                    "name": "FileName",
                    "required": true,
                    "title": "File Name",
                    "type": "Attribute"
                },
                "size": {
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "Size",
                    "required": true,
                    "title": "Size",
                    "type": "Attribute"
                },
                "mime_type": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "MIMEType",
                    "title": "Mime Type",
                    "type": "Attribute"
                }
            },
            "required": [
                "file_name",
                "size"
            ],
            "title": "BinaryFile",
            "type": "object"
        },
        "BinaryOnly": {
            "description": "Attributes\n----------\nmetadata_file : str\n    Filename of the OME-XML metadata file for this binary data. If the file\n    cannot be found, a search can be performed based on the UUID.\nuuid : str\n    The unique identifier of another OME-XML block whose metadata describes the\n    binary data in this file. This UUID is considered authoritative regardless\n    of mismatches in the filename.",
            "properties": {
                "metadata_file": {
                    "name": "MetadataFile",
                    "required": true,
                    "title": "Metadata File",
                    "type": "Attribute"
                },
                "uuid": {
                    "name": "UUID",
                    "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
                    "required": true,
                    "title": "Uuid",
                    "type": "Attribute"
                }
            },
            "required": [
                "metadata_file",
                "uuid"
            ],
            "title": "BinaryOnly",
            "type": "object"
        },
        "Binning": {
            "description": "Represents the number of pixels that are combined to form larger pixels.\n\n{used:CCD,EMCCD}\n\nAttributes\n----------\nONEBYONE : str\n    No binning.\nTWOBYTWO : str\n    2×2 binning.\nFOURBYFOUR : str\n    4×4 binning.\nEIGHTBYEIGHT : str\n    8×8 binning.\nOTHER : str\n    Other binning value.",
            "enum": [
                "1x1",
                "2x2",
                "4x4",
                "8x8",
                "Other"
            ],
            "title": "Binning",
            "type": "string"
        },
        "BooleanAnnotation": {
            "description": "A simple boolean annotation of type xsd:boolean.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "name": "Value",
                    "required": true,
                    "title": "Value",
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "BooleanAnnotation",
            "type": "object"
        },
        "Channel": {
            "description": "There must be one per channel in the Image, even for a single-plane image.\nAnd information about how each of them was acquired is stored in the various\noptional *Ref elements.  Each Logical Channel is composed of one or more\nChannelComponents.  For example, an entire spectrum in an FTIR experiment may\nbe stored in a single Logical Channel with each discrete wavenumber of the\nspectrum.\n\nconstituting a ChannelComponent of the FTIR Logical Channel.  An RGB image where the Red, Green and Blue components do not reflect discrete probes but are\ninstead the output of a color camera would be treated similarly - one Logical channel with three ChannelComponents in this case.\nThe total number of ChannelComponents for a set of pixels must equal SizeC.\nThe IlluminationType attribute is a string enumeration which may be set to 'Transmitted', 'Epifluorescence', 'Oblique', or 'NonLinear'.\nThe user interface logic for labeling a given channel for the user should use the first existing attribute in the following sequence:\nName -&gt; Fluor -&gt; EmissionWavelength -&gt; ChannelComponent/Index.\n\nAttributes\n----------\nlight_source_settings : None | LightSourceSettings\n    (The Channel LightSourceSettings).\ndetector_settings : None | DetectorSettings\n    (The Channel DetectorSettings).\nfilter_set_ref : None | FilterSetRef\n    (The Channel FilterSetRef).\nannotation_ref : list[AnnotationRef]\n    (The Channel AnnotationRefs).\nlight_path : None | LightPath\n    (The Channel LightPath).\nid : str\n    (The Channel ID).\nname : None | str\n    A name for the channel that is suitable for presentation to the user.\nsamples_per_pixel : None | int\n    The number of samples the detector takes to form each pixel value.\n    [units:none] Note: This is not the same as \"Frame Averaging\" - see\n    Integration in DetectorSettings\nillumination_type : None | Channel_IlluminationType\n    The method of illumination used to capture the channel.\npinhole_size : None | float\n    The optional PinholeSize attribute allows specifying adjustable pin hole\n    diameters for confocal microscopes. Units are set by PinholeSizeUnit.\npinhole_size_unit : UnitsLength\n    The units of the pin hole diameter for confocal microscopes -\n    default:microns[µm].\nacquisition_mode : None | Channel_AcquisitionMode\n    AcquisitionMode describes the type of microscopy performed for each channel\ncontrast_method : None | Channel_ContrastMethod\n    ContrastMethod describes the technique used to achieve contrast for each\n    channel\nexcitation_wavelength : None | float\n    Wavelength of excitation for a particular channel. Units are set by\n    ExcitationWavelengthUnit.\nexcitation_wavelength_unit : UnitsLength\n    The units of the wavelength of excitation - default:nanometres[nm].\nemission_wavelength : None | float\n    Wavelength of emission for a particular channel. Units are set by\n    EmissionWavelengthUnit.\nemission_wavelength_unit : UnitsLength\n    The units of the wavelength of emission - default:nanometres[nm].\nfluor : None | str\n    The Fluor attribute is used for fluorescence images. This is the name of\n    the fluorophore used to produce this channel [plain text string]\nnd_filter : None | float\n    The NDfilter attribute is used to specify the combined effect of any\n    neutral density filters used. The amount of light the filter transmits at a\n    maximum [units:none] A fraction, as a value from 0.0 to 1.0. NOTE: This was\n    formerly described as \"units optical density expressed as a\n    PercentFraction\". This was how the field had been described in the schema\n    from the beginning but all the use of it has been in the opposite\n    direction, i.e. as a amount transmitted, not the amount blocked. This\n    change has been made to make the model reflect this usage.\npockel_cell_setting : None | int\n    The PockelCellSetting used for this channel. This is the amount the\n    polarization of the beam is rotated by. [units:none]\ncolor : Color\n    A color used to render this channel - encoded as RGBA The default value\n    \"-1\" is #FFFFFFFF so solid white (it is a signed 32 bit value) NOTE: Prior\n    to the 2012-06 schema the default value was incorrect and produced a\n    transparent red not solid white.",
            "properties": {
                "light_source_settings": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LightSourceSettings"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LightSourceSettings",
                    "type": "Element"
                },
                "detector_settings": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DetectorSettings"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "DetectorSettings",
                    "type": "Element"
                },
                "filter_set_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FilterSetRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FilterSetRef",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "light_path": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LightPath"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LightPath",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Channel:\\S+)|(Channel:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                },
                "samples_per_pixel": {
                    "anyOf": [
                        {
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 1,
                    "name": "SamplesPerPixel",
                    "title": "Samples Per Pixel",
                    "type": "Attribute"
                },
                "illumination_type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Channel_IlluminationType"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "IlluminationType",
                    "type": "Attribute"
                },
                "pinhole_size": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "PinholeSize",
                    "title": "Pinhole Size",
                    "type": "Attribute"
                },
                "pinhole_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "µm",
                    "name": "PinholeSizeUnit",
                    "type": "Attribute"
                },
                "acquisition_mode": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Channel_AcquisitionMode"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "AcquisitionMode",
                    "type": "Attribute"
                },
                "contrast_method": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Channel_ContrastMethod"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ContrastMethod",
                    "type": "Attribute"
                },
                "excitation_wavelength": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "ExcitationWavelength",
                    "title": "Excitation Wavelength",
                    "type": "Attribute"
                },
                "excitation_wavelength_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "nm",
                    "name": "ExcitationWavelengthUnit",
                    "type": "Attribute"
                },
                "emission_wavelength": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "EmissionWavelength",
                    "title": "Emission Wavelength",
                    "type": "Attribute"
                },
                "emission_wavelength_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "nm",
                    "name": "EmissionWavelengthUnit",
                    "type": "Attribute"
                },
                "fluor": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Fluor",
                    "title": "Fluor",
                    "type": "Attribute"
                },
                "nd_filter": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "NDFilter",
                    "title": "Nd Filter",
                    "type": "Attribute"
                },
                "pockel_cell_setting": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "PockelCellSetting",
                    "title": "Pockel Cell Setting",
                    "type": "Attribute"
                },
                "color": {
                    "format": "color",
                    "name": "Color",
                    "title": "Color",
                    "type": "Attribute"
                }
            },
            "title": "Channel",
            "type": "object"
        },
        "Channel_AcquisitionMode": {
            "enum": [
                "WideField",
                "LaserScanningConfocalMicroscopy",
                "SpinningDiskConfocal",
                "SlitScanConfocal",
                "MultiPhotonMicroscopy",
                "StructuredIllumination",
                "SingleMoleculeImaging",
                "TotalInternalReflection",
                "FluorescenceLifetime",
                "SpectralImaging",
                "FluorescenceCorrelationSpectroscopy",
                "NearFieldScanningOpticalMicroscopy",
                "SecondHarmonicGenerationImaging",
                "PALM",
                "STORM",
                "STED",
                "TIRF",
                "FSM",
                "LCM",
                "Other",
                "BrightField",
                "SweptFieldConfocal",
                "SPIM"
            ],
            "title": "Channel_AcquisitionMode",
            "type": "string"
        },
        "Channel_ContrastMethod": {
            "enum": [
                "Brightfield",
                "Phase",
                "DIC",
                "HoffmanModulation",
                "ObliqueIllumination",
                "PolarizedLight",
                "Darkfield",
                "Fluorescence",
                "Other"
            ],
            "title": "Channel_ContrastMethod",
            "type": "string"
        },
        "Channel_IlluminationType": {
            "enum": [
                "Transmitted",
                "Epifluorescence",
                "Oblique",
                "NonLinear",
                "Other"
            ],
            "title": "Channel_IlluminationType",
            "type": "string"
        },
        "CommentAnnotation": {
            "description": "A simple comment annotation.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "name": "Value",
                    "required": true,
                    "title": "Value",
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "CommentAnnotation",
            "type": "object"
        },
        "Dataset": {
            "description": "An element specifying a collection of images that are always processed\ntogether.\n\nImages can belong to more than one Dataset, and a Dataset may\ncontain more than one Image. Images contain one or more DatasetRef\nelements to specify what datasets they belong to. Once a Dataset has\nbeen processed in any way, its collection of images cannot be\naltered. The ExperimenterRef and ExperimenterGroupRef elements\nspecify the person and group this Dataset belongs to. Projects may\ncontain one or more Datasets, and Datasets may belong to one or more\nProjects. This relationship is specified by listing DatasetRef\nelements within the Project element.\n\nAttributes\n----------\ndescription : None | str\n    A description for the dataset. [plain-text multi-line string]\nexperimenter_ref : None | ExperimenterRef\n    (The Dataset ExperimenterRef).\nexperimenter_group_ref : None | ExperimenterGroupRef\n    (The Dataset ExperimenterGroupRef).\nimage_ref : list[ImageRef]\n    (The Dataset ImageRefs).\nannotation_ref : list[AnnotationRef]\n    (The Dataset AnnotationRefs).\nname : None | str\n    A name for the dataset that is suitable for presentation to the user.\nid : str\n    (The Dataset ID).",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "experimenter_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExperimenterRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExperimenterRef",
                    "type": "Element"
                },
                "experimenter_group_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExperimenterGroupRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExperimenterGroupRef",
                    "type": "Element"
                },
                "image_refs": {
                    "items": {
                        "$ref": "#/$defs/ImageRef"
                    },
                    "name": "ImageRef",
                    "title": "Image Refs",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dataset:\\S+)|(Dataset:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "Dataset",
            "type": "object"
        },
        "DatasetRef": {
            "description": "The DatasetRef element refers to a Dataset by specifying the Dataset ID\nattribute.\n\nOne or more DatasetRef elements may be listed within the Image\nelement to specify what Datasets the Image belongs to.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dataset:\\S+)|(Dataset:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "DatasetRef",
            "type": "object"
        },
        "Detector": {
            "description": "The type of detector used to capture the image.\n\nThe Detector ID can be used as a reference within the Channel\nelement in the Image element. The values stored in Detector\nrepresent the fixed values, variable values modified during the\nacquisition go in DetectorSettings Each attribute now has an\nindication of what type of detector it applies to. This is\npreparatory work for cleaning up and possibly splitting this object\ninto sub-types.\n\nAttributes\n----------\nannotation_ref : list[AnnotationRef]\n    (The Detector AnnotationRefs).\ngain : None | float\n    The Detector Gain for this detector, as a float. [units:none]\n    {used:CCD,EMCCD,PMT}\nvoltage : None | float\n    The Voltage of the detector (e.g. PMT voltage) as a float. {used:PMT} Units\n    are set by VoltageUnit.\nvoltage_unit : UnitsElectricPotential\n    The units of the Voltage - default:volts[V].\noffset : None | float\n    The Detector Offset. [units:none] {used:CCD,EMCCD}\nzoom : None | float\n    The fixed Zoom for a detector. [units:none] {used:PMT}\namplification_gain : None | float\n    Gain applied to the detector signal. This is the electronic gain (as\n    apposed to the inherent gain) that is set for the detector. [units:none]\n    {used:EMCCD#EMGain}\nid : str\n    (The Detector ID).\ntype : None | Detector_Type\n    The Type of detector. E.g. CCD, PMT, EMCCD etc.",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "gain": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Gain",
                    "title": "Gain",
                    "type": "Attribute"
                },
                "voltage": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Voltage",
                    "title": "Voltage",
                    "type": "Attribute"
                },
                "voltage_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsElectricPotential"
                        }
                    ],
                    "default": "V",
                    "name": "VoltageUnit",
                    "type": "Attribute"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Offset",
                    "title": "Offset",
                    "type": "Attribute"
                },
                "zoom": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Zoom",
                    "title": "Zoom",
                    "type": "Attribute"
                },
                "amplification_gain": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "AmplificationGain",
                    "title": "Amplification Gain",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Detector:\\S+)|(Detector:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Detector_Type"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Type",
                    "type": "Attribute"
                }
            },
            "title": "Detector",
            "type": "object"
        },
        "DetectorSettings": {
            "description": "This holds the setting applied to a detector as well as a reference to the\ndetector.\n\nThe ID is the detector used in this case. The values stored in\nDetectorSettings represent the variable values, fixed values not\nmodified during the acquisition go in Detector. Each attribute now\nhas an indication of what type of detector it applies to. This is\npreparatory work for cleaning up and possibly splitting this object\ninto sub-types.\n\nAttributes\n----------\nid : str\n    (The DetectorSettings ID).\noffset : None | float\n    The Offset of the detector. [units none] {used:CCD,EMCCD}\ngain : None | float\n    The Gain of the detector. [units:none] {used:CCD,EMCCD,PMT}\nvoltage : None | float\n    The Voltage of the detector. {used:PMT} Units are set by VoltageUnit.\nvoltage_unit : UnitsElectricPotential\n    The units of the Voltage of the detector - default:volts[V]\nzoom : None | float\n    The Zoom or \"Confocal Zoom\" or \"Scan Zoom\" for a detector. [units:none]\n    {used:PMT}\nread_out_rate : None | float\n    The speed at which the detector can count pixels.  {used:CCD,EMCCD} This is\n    the bytes per second that can be read from the detector (like a baud rate).\n    Units are set by ReadOutRateUnit.\nread_out_rate_unit : UnitsFrequency\n    The units of the ReadOutRate - default:megahertz[Hz].\nbinning : None | Binning\n    Represents the number of pixels that are combined to form larger pixels.\n    {used:CCD,EMCCD}\nintegration : None | int\n    This is the number of sequential frames that get averaged, to improve the\n    signal-to-noise ratio. [units:none] {used:CCD,EMCCD}",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Detector:\\S+)|(Detector:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Offset",
                    "title": "Offset",
                    "type": "Attribute"
                },
                "gain": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Gain",
                    "title": "Gain",
                    "type": "Attribute"
                },
                "voltage": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Voltage",
                    "title": "Voltage",
                    "type": "Attribute"
                },
                "voltage_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsElectricPotential"
                        }
                    ],
                    "default": "V",
                    "name": "VoltageUnit",
                    "type": "Attribute"
                },
                "zoom": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Zoom",
                    "title": "Zoom",
                    "type": "Attribute"
                },
                "read_out_rate": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ReadOutRate",
                    "title": "Read Out Rate",
                    "type": "Attribute"
                },
                "read_out_rate_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsFrequency"
                        }
                    ],
                    "default": "MHz",
                    "name": "ReadOutRateUnit",
                    "type": "Attribute"
                },
                "binning": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Binning"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Binning",
                    "type": "Attribute"
                },
                "integration": {
                    "anyOf": [
                        {
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 1,
                    "name": "Integration",
                    "title": "Integration",
                    "type": "Attribute"
                }
            },
            "title": "DetectorSettings",
            "type": "object"
        },
        "Detector_Type": {
            "enum": [
                "CCD",
                "IntensifiedCCD",
                "AnalogVideo",
                "PMT",
                "Photodiode",
                "Spectroscopy",
                "LifetimeImaging",
                "CorrelationSpectroscopy",
                "FTIR",
                "EMCCD",
                "APD",
                "CMOS",
                "EBCCD",
                "Other"
            ],
            "title": "Detector_Type",
            "type": "string"
        },
        "Dichroic": {
            "description": "The dichromatic beamsplitter or dichroic mirror used for this filter\ncombination.",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dichroic:\\S+)|(Dichroic:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "Dichroic",
            "type": "object"
        },
        "DichroicRef": {
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dichroic:\\S+)|(Dichroic:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "DichroicRef",
            "type": "object"
        },
        "DoubleAnnotation": {
            "description": "A simple numerical annotation of type xsd:double.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "name": "Value",
                    "required": true,
                    "title": "Value",
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "DoubleAnnotation",
            "type": "object"
        },
        "Ellipse": {
            "description": "A simple ellipse object.\n\nIf rotation is required apply a transformation at the Shape level.\n\nAttributes\n----------\nx : float\n    The X coordinate of the center of the ellipse. [units pixels]\ny : float\n    The Y coordinate of the center of the ellipse. [units pixels]\nradius_x : float\n    The horizontal radius of the ellipse. [units pixels]\nradius_y : float\n    The vertical radius of the ellipse. [units pixels]",
            "properties": {
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AffineTransform"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Transform",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "fill_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillColor",
                    "title": "Fill Color",
                    "type": "Attribute"
                },
                "fill_rule": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FillRule"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillRule",
                    "type": "Attribute"
                },
                "stroke_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeColor",
                    "title": "Stroke Color",
                    "type": "Attribute"
                },
                "stroke_width": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeWidth",
                    "title": "Stroke Width",
                    "type": "Attribute"
                },
                "stroke_width_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pixel",
                    "name": "StrokeWidthUnit",
                    "type": "Attribute"
                },
                "stroke_dash_array": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeDashArray",
                    "title": "Stroke Dash Array",
                    "type": "Attribute"
                },
                "text": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Text",
                    "title": "Text",
                    "type": "Attribute"
                },
                "font_family": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontFamily"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontFamily",
                    "type": "Attribute"
                },
                "font_size": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FontSize",
                    "title": "Font Size",
                    "type": "Attribute"
                },
                "font_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pt",
                    "name": "FontSizeUnit",
                    "type": "Attribute"
                },
                "font_style": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontStyle"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontStyle",
                    "type": "Attribute"
                },
                "locked": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Locked",
                    "title": "Locked",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "the_z": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheZ",
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheT",
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheC",
                    "title": "The C",
                    "type": "Attribute"
                },
                "x": {
                    "name": "X",
                    "required": true,
                    "title": "X",
                    "type": "Attribute"
                },
                "y": {
                    "name": "Y",
                    "required": true,
                    "title": "Y",
                    "type": "Attribute"
                },
                "radius_x": {
                    "name": "RadiusX",
                    "required": true,
                    "title": "Radius X",
                    "type": "Attribute"
                },
                "radius_y": {
                    "name": "RadiusY",
                    "required": true,
                    "title": "Radius Y",
                    "type": "Attribute"
                }
            },
            "required": [
                "x",
                "y",
                "radius_x",
                "radius_y"
            ],
            "title": "Ellipse",
            "type": "object"
        },
        "Experiment": {
            "description": "This element describes the type of experiment.\n\nThe required Type attribute must contain one or more entries from the following list:\nFP FRET Time-lapse 4-D+ Screen Immunocytochemistry FISH Electrophysiology  Ion-Imaging Colocalization PGI/Documentation\nFRAP Photoablation Optical-Trapping Photoactivation Fluorescence-Lifetime Spectral-Imaging Other\nFP refers to fluorescent proteins, PGI/Documentation is not a 'data' image.\nThe optional Description element may contain free text to further describe the experiment.\n\nAttributes\n----------\ndescription : None | str\n    A description for the experiment. [plain-text multi-line string]\nexperimenter_ref : None | ExperimenterRef\n    This is a link to the Experimenter who conducted the experiment\nmicrobeam_manipulation : list[MicrobeamManipulation]\n    (The Experiment MicrobeamManipulations).\ntype : list[Experiment_value]\n    A term to describe the type of experiment.\nid : str\n    (The Experiment ID).",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "experimenter_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExperimenterRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExperimenterRef",
                    "type": "Element"
                },
                "microbeam_manipulations": {
                    "items": {
                        "$ref": "#/$defs/MicrobeamManipulation"
                    },
                    "name": "MicrobeamManipulation",
                    "title": "Microbeam Manipulations",
                    "type": "Element"
                },
                "type": {
                    "items": {
                        "$ref": "#/$defs/Experiment_value"
                    },
                    "name": "Type",
                    "title": "Type",
                    "tokens": true,
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experiment:\\S+)|(Experiment:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "Experiment",
            "type": "object"
        },
        "ExperimentRef": {
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experiment:\\S+)|(Experiment:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "ExperimentRef",
            "type": "object"
        },
        "Experiment_value": {
            "enum": [
                "FP",
                "FRET",
                "TimeLapse",
                "FourDPlus",
                "Screen",
                "Immunocytochemistry",
                "Immunofluorescence",
                "FISH",
                "Electrophysiology",
                "IonImaging",
                "Colocalization",
                "PGIDocumentation",
                "FluorescenceLifetime",
                "SpectralImaging",
                "Photobleaching",
                "SPIM",
                "Other"
            ],
            "title": "Experiment_value",
            "type": "string"
        },
        "Experimenter": {
            "description": "This element describes a person who performed an imaging experiment.\n\nThis person may also be a user of the OME system, in which case the\nUserName element contains their login name. Experimenters may belong\nto one or more groups which are specified using one or more\nExperimenterGroupRef elements.\n\nAttributes\n----------\nannotation_ref : list[AnnotationRef]\n    (The Experimenter AnnotationRefs).\nid : str\n    (The Experimenter ID).\nfirst_name : None | str\n    First name, sometime called christian name or given name or forename.\n    [plain text string]\nmiddle_name : None | str\n    Any other names. [plain text string]\nlast_name : None | str\n    A person's last name sometimes called surname or family name. [plain text\n    string]\nemail : None | str\n    A person's email address. [valid email address as string]\ninstitution : None | str\n    A person's Institution The organizing structure that people belong to other\n    than groups.  A university, or company, etc. We do not specify a department\n    element, and do not mean for Institution to be used in this way. We simply\n    wish to say XXX at YYY.  Where YYY has a better chance of being tied to a\n    geographically fixed location and of being more recognizable than a group\n    of experimenters. [plain text string]\nuser_name : None | str\n    This is the username of the experimenter (in a 'unix' or 'database' sense).\n    [plain text string]",
            "properties": {
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "first_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FirstName",
                    "title": "First Name",
                    "type": "Attribute"
                },
                "middle_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "MiddleName",
                    "title": "Middle Name",
                    "type": "Attribute"
                },
                "last_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LastName",
                    "title": "Last Name",
                    "type": "Attribute"
                },
                "email": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Email",
                    "title": "Email",
                    "type": "Attribute"
                },
                "institution": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Institution",
                    "title": "Institution",
                    "type": "Attribute"
                },
                "user_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "UserName",
                    "title": "User Name",
                    "type": "Attribute"
                }
            },
            "title": "Experimenter",
            "type": "object"
        },
        "ExperimenterGroup": {
            "description": "The ExperimenterGroupID is required.\n\nInformation should ideally be specified for at least one Leader as a\ncontact for the group. The Leaders are themselves Experimenters.\n\nAttributes\n----------\ndescription : None | str\n    A description for the group. [plain-text multi-line string]\nexperimenter_ref : list[ExperimenterRef]\n    (The ExperimenterGroup ExperimenterRefs).\nleader : list[Leader]\n    (The ExperimenterGroup Leaders).\nannotation_ref : list[AnnotationRef]\n    (The ExperimenterGroup AnnotationRefs).\nname : None | str\n    (The ExperimenterGroup Name).\nid : str\n    (The ExperimenterGroup ID).",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "experimenter_refs": {
                    "items": {
                        "$ref": "#/$defs/ExperimenterRef"
                    },
                    "name": "ExperimenterRef",
                    "title": "Experimenter Refs",
                    "type": "Element"
                },
                "leaders": {
                    "items": {
                        "$ref": "#/$defs/Leader"
                    },
                    "name": "Leader",
                    "title": "Leaders",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:ExperimenterGroup:\\S+)|(ExperimenterGroup:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "ExperimenterGroup",
            "type": "object"
        },
        "ExperimenterGroupRef": {
            "description": "This empty element has a reference (the ExperimenterGroup ID attribute) to a\nExperimenterGroup defined within OME.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:ExperimenterGroup:\\S+)|(ExperimenterGroup:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "ExperimenterGroupRef",
            "type": "object"
        },
        "ExperimenterRef": {
            "description": "This empty element has a required Experimenter ID and an optional DocumentID\nattribute which refers to one of the Experimenters defined within OME.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "ExperimenterRef",
            "type": "object"
        },
        "External": {
            "description": "Describes a file location.\n\nCan optionally specify a portion of a file using Offset and a\nReadLength. If Offset and ReadLength are specified in conjuction\nwith Compression, then they point into the uncompressed file.\n\nAttributes\n----------\nhref : str\n    file location\nsha1 : bytes\n    The digest of the file specified in href.\ncompression : External_Compression\n    Specifies the compression scheme used to encode the data.",
            "properties": {
                "href": {
                    "required": true,
                    "title": "Href",
                    "type": "Attribute"
                },
                "sha1": {
                    "format": "base16",
                    "length": 20,
                    "name": "SHA1",
                    "required": true,
                    "title": "Sha1",
                    "type": "Attribute"
                },
                "compression": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/External_Compression"
                        }
                    ],
                    "default": "none",
                    "name": "Compression",
                    "type": "Attribute"
                }
            },
            "required": [
                "href",
                "sha1"
            ],
            "title": "External",
            "type": "object"
        },
        "External_Compression": {
            "enum": [
                "zlib",
                "bzip2",
                "none"
            ],
            "title": "External_Compression",
            "type": "string"
        },
        "Filament": {
            "description": "The Filament element is used to describe various kinds of filament bulbs\nsuch as Incadescent or Halogen.\n\nThe Power of the Filament is now stored in the LightSource.\n\nAttributes\n----------\ntype : None | Filament_Type\n    The type of filament.",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "power": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Power",
                    "title": "Power",
                    "type": "Attribute"
                },
                "power_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsPower"
                        }
                    ],
                    "default": "mW",
                    "name": "PowerUnit",
                    "type": "Attribute"
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Filament_Type"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Type",
                    "type": "Attribute"
                }
            },
            "title": "Filament",
            "type": "object"
        },
        "Filament_Type": {
            "enum": [
                "Incandescent",
                "Halogen",
                "Other"
            ],
            "title": "Filament_Type",
            "type": "string"
        },
        "FileAnnotation": {
            "description": "A file object annotation.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "binary_file": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/BinaryFile"
                        }
                    ],
                    "name": "BinaryFile",
                    "required": true,
                    "type": "Element"
                }
            },
            "required": [
                "binary_file"
            ],
            "title": "FileAnnotation",
            "type": "object"
        },
        "Filter": {
            "description": "A filter is either an excitation or emission filters. There should be one\nfilter element specified per wavelength in the image. The channel number\nassociated with a filter set is specified in Channel. It is based on the\nFilterSpec type, so has the required attributes Manufacturer, Model, and\nLotNumber. It may also contain a Type attribute which may be set to 'LongPass',\n'ShortPass', 'BandPass', 'MultiPass',.\n\n'Dichroic', 'NeutralDensity', 'Tuneable' or 'Other'.\nIt can be associated with an optional FilterWheel - Note: this is not the same as a FilterSet\n\nAttributes\n----------\ntransmittance_range : None | TransmittanceRange\n    (The Filter TransmittanceRange).\nannotation_ref : list[AnnotationRef]\n    (The Filter AnnotationRefs).\ntype : None | Filter_Type\n    (The Filter Type).\nfilter_wheel : None | str\n    A filter 'wheel' in OME can refer to any arrangement of filters in a filter\n    holder of any shape. It could, for example, be a filter slider. [plain text\n    string]\nid : str\n    (The Filter ID).",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "transmittance_range": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TransmittanceRange"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "TransmittanceRange",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Filter_Type"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Type",
                    "type": "Attribute"
                },
                "filter_wheel": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FilterWheel",
                    "title": "Filter Wheel",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Filter:\\S+)|(Filter:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "Filter",
            "type": "object"
        },
        "FilterRef": {
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Filter:\\S+)|(Filter:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "FilterRef",
            "type": "object"
        },
        "FilterSet": {
            "description": "Filter set manufacturer specification.\n\nAttributes\n----------\nexcitation_filter_ref : list[FilterRef]\n    The Filters placed in the Excitation light path.\ndichroic_ref : None | DichroicRef\n    (The FilterSet DichroicRef).\nemission_filter_ref : list[FilterRef]\n    The Filters placed in the Emission light path.\nid : str\n    (The FilterSet ID).",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "excitation_filters": {
                    "items": {
                        "$ref": "#/$defs/FilterRef"
                    },
                    "name": "ExcitationFilterRef",
                    "title": "Excitation Filters",
                    "type": "Element"
                },
                "dichroic_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DichroicRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "DichroicRef",
                    "type": "Element"
                },
                "emission_filters": {
                    "items": {
                        "$ref": "#/$defs/FilterRef"
                    },
                    "name": "EmissionFilterRef",
                    "title": "Emission Filters",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:FilterSet:\\S+)|(FilterSet:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "FilterSet",
            "type": "object"
        },
        "FilterSetRef": {
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:FilterSet:\\S+)|(FilterSet:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "FilterSetRef",
            "type": "object"
        },
        "Filter_Type": {
            "enum": [
                "Dichroic",
                "LongPass",
                "ShortPass",
                "BandPass",
                "MultiPass",
                "NeutralDensity",
                "Tuneable",
                "Other"
            ],
            "title": "Filter_Type",
            "type": "string"
        },
        "Folder": {
            "description": "An element specifying a possibly heterogeneous collection of data.\n\nFolders may contain Folders so that data may be organized within a\ntree of Folders. Data may be in multiple Folders but a Folder may\nnot be in more than one other Folder.\n\nAttributes\n----------\ndescription : None | str\n    A description for the folder. [plain-text multi-line string]\nfolder_ref : list[FolderRef]\n    (The Folder FolderRefs).\nimage_ref : list[ImageRef]\n    (The Folder ImageRefs).\nroi_ref : list[ROIRef]\n    (The Folder ROIRefs).\nannotation_ref : list[AnnotationRef]\n    (The Folder AnnotationRefs).\nid : str\n    (The Folder ID).\nname : None | str\n    A name for the folder that is suitable for presentation to the user.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "folder_refs": {
                    "items": {
                        "$ref": "#/$defs/FolderRef"
                    },
                    "name": "FolderRef",
                    "title": "Folder Refs",
                    "type": "Element"
                },
                "image_refs": {
                    "items": {
                        "$ref": "#/$defs/ImageRef"
                    },
                    "name": "ImageRef",
                    "title": "Image Refs",
                    "type": "Element"
                },
                "roi_refs": {
                    "items": {
                        "$ref": "#/$defs/ROIRef"
                    },
                    "name": "ROIRef",
                    "title": "Roi Refs",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Folder:\\S+)|(Folder:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                }
            },
            "title": "Folder",
            "type": "object"
        },
        "FolderRef": {
            "description": "The FolderRef element refers to a Folder by specifying the Folder ID\nattribute.\n\nOne or more FolderRef elements may be listed within the Folder\nelement to specify what Folders the Folder contains. This tree\nhierarchy must be acyclic.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Folder:\\S+)|(Folder:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "FolderRef",
            "type": "object"
        },
        "GenericExcitationSource": {
            "description": "The GenericExcitationSource element is used to represent a source as a\ncollection of key/value pairs, stored in a Map.\n\nThe other lightsource objects should always be used in preference to\nthis if possible.",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "power": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Power",
                    "title": "Power",
                    "type": "Attribute"
                },
                "power_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsPower"
                        }
                    ],
                    "default": "mW",
                    "name": "PowerUnit",
                    "type": "Attribute"
                },
                "map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Map"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Map",
                    "type": "Element"
                }
            },
            "title": "GenericExcitationSource",
            "type": "object"
        },
        "Image": {
            "description": "This element describes the actual image and its meta-data.\n\nThe elements that are references (ending in Ref or Settings) refer\nto elements defined outside of the Image element. Ref elements are\nsimple links, while Settings elements are links with additional\nvalues. If any of the required Image attributes or elements are\nmissing, its guaranteed to be an invalid document. The required\nattributes and elements are ID and Pixels. ExperimenterRef is\nrequired for all Images with well formed LSIDs. ImageType is a\nvendor-specific designation of the type of image this is. Examples\nof ImageType include 'STK', 'SoftWorx', etc. The Name attributes are\nin all cases the name of the element instance. In this case, the\nname of the image, not necessarily the filename. Physical size of\npixels are microns[µm].\n\nAttributes\n----------\nacquisition_date : None | datetime\n    The acquisition date of the Image. The element contains an xsd:dateTime\n    string based on the ISO 8601 format (i.e. 1988-04-07T18:39:09.359) YYYY-MM-\n    DDTHH:mm:SS.sssZ Y - Year M - Month D - Day H - Hour m - minutes S -\n    Seconds s - sub-seconds (optional) Z - Zone (optional) +HH:mm or -HH:mm or\n    Z for UTC Note: xsd:dataTime supports a very wide date range with unlimited\n    precision. The full date range and precision are not typically supported by\n    platform- and language-specific libraries. Where the supported time\n    precision is less than the precision used by the xsd:dateTime timestamp\n    there will be loss of precision; this will typically occur via direct\n    truncation or (less commonly) rounding. The year value can be large and/or\n    negative. Any value covering the current or last century should be\n    correctly processed, but some systems cannot process earlier dates. The\n    sub-second value is defined as an unlimited number of digits after the\n    decimal point. In Java a minimum of millisecond precision is guaranteed. In\n    C++ microsecond precision is guaranteed, with nanosecond precision being\n    available on some platforms. Time zones are supported, eg\n    '2013-10-24T11:52:33+01:00' for Paris, but in most cases it will be\n    converted to UTC when the timestamp is written.\nexperimenter_ref : None | ExperimenterRef\n    (The Image ExperimenterRef).\ndescription : None | str\n    A description for the image. [plain-text multi-line string]\nexperiment_ref : None | ExperimentRef\n    (The Image ExperimentRef).\nexperimenter_group_ref : None | ExperimenterGroupRef\n    (The Image ExperimenterGroupRef).\ninstrument_ref : None | InstrumentRef\n    (The Image InstrumentRef).\nobjective_settings : None | ObjectiveSettings\n    (The Image ObjectiveSettings).\nimaging_environment : None | ImagingEnvironment\n    (The Image ImagingEnvironment).\nstage_label : None | StageLabel\n    (The Image StageLabel).\npixels : Pixels\n    (The Image Pixels).\nroi_ref : list[ROIRef]\n    (The Image ROIRefs).\nmicrobeam_manipulation_ref : list[MicrobeamManipulationRef]\n    (The Image MicrobeamManipulationRefs).\nannotation_ref : list[AnnotationRef]\n    (The Image AnnotationRefs).\nid : str\n    (The Image ID).\nname : None | str\n    (The Image Name).",
            "properties": {
                "acquisition_date": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "AcquisitionDate",
                    "title": "Acquisition Date",
                    "type": "Element"
                },
                "experimenter_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExperimenterRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExperimenterRef",
                    "type": "Element"
                },
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "experiment_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExperimentRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExperimentRef",
                    "type": "Element"
                },
                "experimenter_group_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExperimenterGroupRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExperimenterGroupRef",
                    "type": "Element"
                },
                "instrument_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/InstrumentRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "InstrumentRef",
                    "type": "Element"
                },
                "objective_settings": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ObjectiveSettings"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ObjectiveSettings",
                    "type": "Element"
                },
                "imaging_environment": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ImagingEnvironment"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ImagingEnvironment",
                    "type": "Element"
                },
                "stage_label": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StageLabel"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StageLabel",
                    "type": "Element"
                },
                "pixels": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/Pixels"
                        }
                    ],
                    "name": "Pixels",
                    "required": true,
                    "type": "Element"
                },
                "roi_refs": {
                    "items": {
                        "$ref": "#/$defs/ROIRef"
                    },
                    "name": "ROIRef",
                    "title": "Roi Refs",
                    "type": "Element"
                },
                "microbeam_manipulation_refs": {
                    "items": {
                        "$ref": "#/$defs/MicrobeamManipulationRef"
                    },
                    "name": "MicrobeamManipulationRef",
                    "title": "Microbeam Manipulation Refs",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Image:\\S+)|(Image:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                }
            },
            "required": [
                "pixels"
            ],
            "title": "Image",
            "type": "object"
        },
        "ImageRef": {
            "description": "The ImageRef element is a reference to an Image element.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Image:\\S+)|(Image:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "ImageRef",
            "type": "object"
        },
        "ImagingEnvironment": {
            "description": "This describes the environment that the biological sample was in during the\nexperiment.\n\nAttributes\n----------\nmap : None | Map\n    (The ImagingEnvironment Map).\ntemperature : None | float\n    The Temperature is the define units.\ntemperature_unit : UnitsTemperature\n    The units the Temperature is in - default:Celsius[°C].\nair_pressure : None | float\n    AirPressure is the define units.\nair_pressure_unit : UnitsPressure\n    The units the AirPressure is in - default:millibars[mbar].\nhumidity : None | float\n    Humidity around the sample [units:none] A fraction, as a value from 0.0 to\n    1.0.\nco2_percent : None | float\n    Carbon Dioxide concentration around the sample [units:none] A fraction, as\n    a value from 0.0 to 1.0.",
            "properties": {
                "map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Map"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Map",
                    "type": "Element"
                },
                "temperature": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Temperature",
                    "title": "Temperature",
                    "type": "Attribute"
                },
                "temperature_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsTemperature"
                        }
                    ],
                    "default": "°C",
                    "name": "TemperatureUnit",
                    "type": "Attribute"
                },
                "air_pressure": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "AirPressure",
                    "title": "Air Pressure",
                    "type": "Attribute"
                },
                "air_pressure_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsPressure"
                        }
                    ],
                    "default": "mbar",
                    "name": "AirPressureUnit",
                    "type": "Attribute"
                },
                "humidity": {
                    "anyOf": [
                        {
                            "maximum": 1.0,
                            "minimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "max_inclusive": 1.0,
                    "min_inclusive": 0.0,
                    "name": "Humidity",
                    "title": "Humidity",
                    "type": "Attribute"
                },
                "co2_percent": {
                    "anyOf": [
                        {
                            "maximum": 1.0,
                            "minimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "max_inclusive": 1.0,
                    "min_inclusive": 0.0,
                    "name": "CO2Percent",
                    "title": "Co2 Percent",
                    "type": "Attribute"
                }
            },
            "title": "ImagingEnvironment",
            "type": "object"
        },
        "Instrument": {
            "description": "This element describes the instrument used to capture the Image.\n\nIt is primarily a container for manufacturer's model and catalog\nnumbers for the Microscope, LightSource, Detector, Objective and\nFilters components. The Objective element contains the additional\nelements LensNA and Magnification. The Filters element can be\ncomposed either of separate excitation, emission filters and a\ndichroic mirror or a single filter set. Within the Image itself, a\nreference is made to this one Filter element. There may be multiple\nlight sources, detectors, objectives and filters on a microscope.\nEach of these has their own ID attribute, which can be referred to\nfrom Channel. It is understood that the light path configuration can\nbe different for each channel, but cannot be different for each\ntimepoint or each plane of an XYZ stack.",
            "properties": {
                "microscope": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Microscope"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Microscope",
                    "type": "Element"
                },
                "generic_excitation_sources": {
                    "items": {
                        "$ref": "#/$defs/GenericExcitationSource"
                    },
                    "name": "GenericExcitationSource",
                    "title": "Generic Excitation Sources",
                    "type": "Element"
                },
                "light_emitting_diodes": {
                    "items": {
                        "$ref": "#/$defs/LightEmittingDiode"
                    },
                    "name": "LightEmittingDiode",
                    "title": "Light Emitting Diodes",
                    "type": "Element"
                },
                "filaments": {
                    "items": {
                        "$ref": "#/$defs/Filament"
                    },
                    "name": "Filament",
                    "title": "Filaments",
                    "type": "Element"
                },
                "arcs": {
                    "items": {
                        "$ref": "#/$defs/Arc"
                    },
                    "name": "Arc",
                    "title": "Arcs",
                    "type": "Element"
                },
                "lasers": {
                    "items": {
                        "$ref": "#/$defs/Laser"
                    },
                    "name": "Laser",
                    "title": "Lasers",
                    "type": "Element"
                },
                "detectors": {
                    "items": {
                        "$ref": "#/$defs/Detector"
                    },
                    "name": "Detector",
                    "title": "Detectors",
                    "type": "Element"
                },
                "objectives": {
                    "items": {
                        "$ref": "#/$defs/Objective"
                    },
                    "name": "Objective",
                    "title": "Objectives",
                    "type": "Element"
                },
                "filter_sets": {
                    "items": {
                        "$ref": "#/$defs/FilterSet"
                    },
                    "name": "FilterSet",
                    "title": "Filter Sets",
                    "type": "Element"
                },
                "filters": {
                    "items": {
                        "$ref": "#/$defs/Filter"
                    },
                    "name": "Filter",
                    "title": "Filters",
                    "type": "Element"
                },
                "dichroics": {
                    "items": {
                        "$ref": "#/$defs/Dichroic"
                    },
                    "name": "Dichroic",
                    "title": "Dichroics",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Instrument:\\S+)|(Instrument:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "Instrument",
            "type": "object"
        },
        "InstrumentRef": {
            "description": "This empty element can be used (via the required Instrument ID attribute) to\nrefer to an Instrument defined within OME.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Instrument:\\S+)|(Instrument:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "InstrumentRef",
            "type": "object"
        },
        "Label": {
            "description": "The text label.\n\nAny transformation should be applied at the shape level.\n\nAttributes\n----------\nx : float\n    This defines the X coordinate of the current text position of the first\n    character in the string. [units pixels]\ny : float\n    This defines the Y coordinate of the current text position of the first\n    character in the string. [units pixels]",
            "properties": {
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AffineTransform"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Transform",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "fill_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillColor",
                    "title": "Fill Color",
                    "type": "Attribute"
                },
                "fill_rule": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FillRule"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillRule",
                    "type": "Attribute"
                },
                "stroke_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeColor",
                    "title": "Stroke Color",
                    "type": "Attribute"
                },
                "stroke_width": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeWidth",
                    "title": "Stroke Width",
                    "type": "Attribute"
                },
                "stroke_width_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pixel",
                    "name": "StrokeWidthUnit",
                    "type": "Attribute"
                },
                "stroke_dash_array": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeDashArray",
                    "title": "Stroke Dash Array",
                    "type": "Attribute"
                },
                "text": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Text",
                    "title": "Text",
                    "type": "Attribute"
                },
                "font_family": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontFamily"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontFamily",
                    "type": "Attribute"
                },
                "font_size": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FontSize",
                    "title": "Font Size",
                    "type": "Attribute"
                },
                "font_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pt",
                    "name": "FontSizeUnit",
                    "type": "Attribute"
                },
                "font_style": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontStyle"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontStyle",
                    "type": "Attribute"
                },
                "locked": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Locked",
                    "title": "Locked",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "the_z": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheZ",
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheT",
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheC",
                    "title": "The C",
                    "type": "Attribute"
                },
                "x": {
                    "name": "X",
                    "required": true,
                    "title": "X",
                    "type": "Attribute"
                },
                "y": {
                    "name": "Y",
                    "required": true,
                    "title": "Y",
                    "type": "Attribute"
                }
            },
            "required": [
                "x",
                "y"
            ],
            "title": "Label",
            "type": "object"
        },
        "Laser": {
            "description": "Laser types are specified using two attributes - the Type and the LaserMedium.\n\nAttributes\n----------\npump : None | Pump\n    The Laser element may contain a Pump sub-element which refers to a\n    LightSource used as a laser pump.\ntype : None | Laser_Type\n    Type is the general category of laser.\nlaser_medium : None | Laser_LaserMedium\n    The Medium attribute specifies the actual lasing medium for a given laser\n    type.\nwavelength : None | float\n    The Wavelength of the laser. Units are set by WavelengthUnit.\nwavelength_unit : UnitsLength\n    The units of the Wavelength - default:nanometres[nm].\nfrequency_multiplication : None | int\n    FrequencyMultiplication that may be specified. [units:none]\ntuneable : None | bool\n    Whether or not the laser is Tuneable [flag]\npulse : None | Laser_Pulse\n    The Pulse mode of the laser.\npockel_cell : None | bool\n    If true the laser has a PockelCell to rotate the polarization of the beam.\n    [flag]\nrepetition_rate : None | float\n    The is the rate in Hz at which the laser pulses if the Pulse type is\n    'Repetitive'. hertz[Hz] Units are set by RepetitionRateUnit.\nrepetition_rate_unit : UnitsFrequency\n    The units of the RepetitionRate - default:hertz[Hz].",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "power": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Power",
                    "title": "Power",
                    "type": "Attribute"
                },
                "power_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsPower"
                        }
                    ],
                    "default": "mW",
                    "name": "PowerUnit",
                    "type": "Attribute"
                },
                "pump": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Pump"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Pump",
                    "type": "Element"
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Laser_Type"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Type",
                    "type": "Attribute"
                },
                "laser_medium": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Laser_LaserMedium"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LaserMedium",
                    "type": "Attribute"
                },
                "wavelength": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "Wavelength",
                    "title": "Wavelength",
                    "type": "Attribute"
                },
                "wavelength_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "nm",
                    "name": "WavelengthUnit",
                    "type": "Attribute"
                },
                "frequency_multiplication": {
                    "anyOf": [
                        {
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 1,
                    "name": "FrequencyMultiplication",
                    "title": "Frequency Multiplication",
                    "type": "Attribute"
                },
                "tuneable": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Tuneable",
                    "title": "Tuneable",
                    "type": "Attribute"
                },
                "pulse": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Laser_Pulse"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Pulse",
                    "type": "Attribute"
                },
                "pockel_cell": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "PockelCell",
                    "title": "Pockel Cell",
                    "type": "Attribute"
                },
                "repetition_rate": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "RepetitionRate",
                    "title": "Repetition Rate",
                    "type": "Attribute"
                },
                "repetition_rate_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsFrequency"
                        }
                    ],
                    "default": "Hz",
                    "name": "RepetitionRateUnit",
                    "type": "Attribute"
                }
            },
            "title": "Laser",
            "type": "object"
        },
        "Laser_LaserMedium": {
            "enum": [
                "Cu",
                "Ag",
                "ArFl",
                "ArCl",
                "KrFl",
                "KrCl",
                "XeFl",
                "XeCl",
                "XeBr",
                "N",
                "Ar",
                "Kr",
                "Xe",
                "HeNe",
                "HeCd",
                "CO",
                "CO2",
                "H2O",
                "HFl",
                "NdGlass",
                "NdYAG",
                "ErGlass",
                "ErYAG",
                "HoYLF",
                "HoYAG",
                "Ruby",
                "TiSapphire",
                "Alexandrite",
                "Rhodamine6G",
                "CoumarinC30",
                "GaAs",
                "GaAlAs",
                "EMinus",
                "Other"
            ],
            "title": "Laser_LaserMedium",
            "type": "string"
        },
        "Laser_Pulse": {
            "enum": [
                "CW",
                "Single",
                "QSwitched",
                "Repetitive",
                "ModeLocked",
                "Other"
            ],
            "title": "Laser_Pulse",
            "type": "string"
        },
        "Laser_Type": {
            "enum": [
                "Excimer",
                "Gas",
                "MetalVapor",
                "SolidState",
                "Dye",
                "Semiconductor",
                "FreeElectron",
                "Other"
            ],
            "title": "Laser_Type",
            "type": "string"
        },
        "Leader": {
            "description": "Contact information for a ExperimenterGroup leader specified using a reference\nto an Experimenter element defined elsewhere in the document.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "Leader",
            "type": "object"
        },
        "LightEmittingDiode": {
            "description": "The LightEmittingDiode element is used to describe various kinds of LED\nlamps. As the LightEmittingDiode is inside a LightSource it already has\navailable the values from ManufacturerSpec (Manufacturer, Model, SerialNumber,\nLotNumber) And the values from LightSource which includes Power in milliwatts\nWe have looked at extending this element but have had a problem producing a\ngeneric solution.\n\nPossible attributes talked about adding include:\nPower in lumens - but this is complicated by multi-channel\ndevices like CoolLED where each channel's power is different\nWavelength Range - not a simple value so would require\nmultiple attributes or a child element\nAngle of Projection - this would be further affected by the\noptics used for filtering the naked LED or that combine\npower from multiple devices\nThese values are further affected if you over-drive the LED\nresulting in a more complex system\nAnother issue is that LED's may not be used directly for\nillumination but as drivers for secondary emissions from doped\nfiber optics. This would require the fiber optics to be modeled.\nThanks to Paul Goodwin of Applied Precision of information about\nthis topic.",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "power": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Power",
                    "title": "Power",
                    "type": "Attribute"
                },
                "power_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsPower"
                        }
                    ],
                    "default": "mW",
                    "name": "PowerUnit",
                    "type": "Attribute"
                }
            },
            "title": "LightEmittingDiode",
            "type": "object"
        },
        "LightPath": {
            "description": "A description of the light path.\n\nAttributes\n----------\nexcitation_filter_ref : list[FilterRef]\n    The Filters placed in the Excitation light path.\ndichroic_ref : None | DichroicRef\n    (The LightPath DichroicRef).\nemission_filter_ref : list[FilterRef]\n    The Filters placed in the Emission light path.\nannotation_ref : list[AnnotationRef]\n    (The LightPath AnnotationRefs).",
            "properties": {
                "excitation_filters": {
                    "items": {
                        "$ref": "#/$defs/FilterRef"
                    },
                    "name": "ExcitationFilterRef",
                    "title": "Excitation Filters",
                    "type": "Element"
                },
                "dichroic_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DichroicRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "DichroicRef",
                    "type": "Element"
                },
                "emission_filters": {
                    "items": {
                        "$ref": "#/$defs/FilterRef"
                    },
                    "name": "EmissionFilterRef",
                    "title": "Emission Filters",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                }
            },
            "title": "LightPath",
            "type": "object"
        },
        "LightSourceSettings": {
            "description": "Attributes\n----------\nid : str\n    (The LightSourceSettings ID).\nattenuation : None | float\n    The Attenuation of the light source [units:none] A fraction, as a value\n    from 0.0 to 1.0.\nwavelength : None | float\n    The Wavelength of the light source. Units are set by WavelengthUnit.\nwavelength_unit : UnitsLength\n    The units of the Wavelength of the light source - default:nanometres[nm]",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "attenuation": {
                    "anyOf": [
                        {
                            "maximum": 1.0,
                            "minimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "max_inclusive": 1.0,
                    "min_inclusive": 0.0,
                    "name": "Attenuation",
                    "title": "Attenuation",
                    "type": "Attribute"
                },
                "wavelength": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "Wavelength",
                    "title": "Wavelength",
                    "type": "Attribute"
                },
                "wavelength_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "nm",
                    "name": "WavelengthUnit",
                    "type": "Attribute"
                }
            },
            "title": "LightSourceSettings",
            "type": "object"
        },
        "Line": {
            "description": "A straight line defined by it's end points.\n\nAttributes\n----------\nx1 : float\n    The X coordinate of the start of the line. [units pixels]\ny1 : float\n    The Y coordinate of the start of the line. [units pixels]\nx2 : float\n    The X coordinate of the end of the line. [units pixels]\ny2 : float\n    The Y coordinate of the end of the line. [units pixels]\nmarker_start : None | Marker\n    (The Line MarkerStart).\nmarker_end : None | Marker\n    (The Line MarkerEnd).",
            "properties": {
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AffineTransform"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Transform",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "fill_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillColor",
                    "title": "Fill Color",
                    "type": "Attribute"
                },
                "fill_rule": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FillRule"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillRule",
                    "type": "Attribute"
                },
                "stroke_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeColor",
                    "title": "Stroke Color",
                    "type": "Attribute"
                },
                "stroke_width": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeWidth",
                    "title": "Stroke Width",
                    "type": "Attribute"
                },
                "stroke_width_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pixel",
                    "name": "StrokeWidthUnit",
                    "type": "Attribute"
                },
                "stroke_dash_array": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeDashArray",
                    "title": "Stroke Dash Array",
                    "type": "Attribute"
                },
                "text": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Text",
                    "title": "Text",
                    "type": "Attribute"
                },
                "font_family": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontFamily"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontFamily",
                    "type": "Attribute"
                },
                "font_size": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FontSize",
                    "title": "Font Size",
                    "type": "Attribute"
                },
                "font_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pt",
                    "name": "FontSizeUnit",
                    "type": "Attribute"
                },
                "font_style": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontStyle"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontStyle",
                    "type": "Attribute"
                },
                "locked": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Locked",
                    "title": "Locked",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "the_z": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheZ",
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheT",
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheC",
                    "title": "The C",
                    "type": "Attribute"
                },
                "x1": {
                    "name": "X1",
                    "required": true,
                    "title": "X1",
                    "type": "Attribute"
                },
                "y1": {
                    "name": "Y1",
                    "required": true,
                    "title": "Y1",
                    "type": "Attribute"
                },
                "x2": {
                    "name": "X2",
                    "required": true,
                    "title": "X2",
                    "type": "Attribute"
                },
                "y2": {
                    "name": "Y2",
                    "required": true,
                    "title": "Y2",
                    "type": "Attribute"
                },
                "marker_start": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Marker"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "MarkerStart",
                    "type": "Attribute"
                },
                "marker_end": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Marker"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "MarkerEnd",
                    "type": "Attribute"
                }
            },
            "required": [
                "x1",
                "y1",
                "x2",
                "y2"
            ],
            "title": "Line",
            "type": "object"
        },
        "ListAnnotation": {
            "description": "This annotation is a grouping object.\n\nIt uses the sequence of annotation refs from the base Annotation to\nform the list.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                }
            },
            "title": "ListAnnotation",
            "type": "object"
        },
        "LongAnnotation": {
            "description": "A simple numerical annotation of type xsd:long.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "name": "Value",
                    "required": true,
                    "title": "Value",
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "LongAnnotation",
            "type": "object"
        },
        "M": {
            "properties": {
                "value": {
                    "default": "",
                    "required": true,
                    "title": "Value",
                    "type": "string"
                },
                "k": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "K",
                    "title": "K",
                    "type": "Attribute"
                }
            },
            "title": "M",
            "type": "object"
        },
        "Map": {
            "description": "This is a Mapping of key/value pairs.\n\nAttributes\n----------\nm : list[\"Map.M\"]\n    This is a key/value pair used to build up a Mapping. The Element and\n    Attribute name are kept to single letters to minimize the length at the\n    expense of readability as they are likely to occur many times.",
            "properties": {
                "ms": {
                    "items": {
                        "$ref": "#/$defs/M"
                    },
                    "name": "M",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Ms",
                    "type": "Element"
                }
            },
            "title": "Map",
            "type": "object"
        },
        "MapAnnotation": {
            "description": "An map annotation.\n\nThe contents of this is a list of key/value pairs.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/Map"
                        }
                    ],
                    "name": "Value",
                    "required": true,
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "MapAnnotation",
            "type": "object"
        },
        "Marker": {
            "const": "Arrow",
            "description": "Shape of marker on the end of a line.\n\n[enumeration]",
            "enum": [
                "Arrow"
            ],
            "title": "Marker",
            "type": "string"
        },
        "Mask": {
            "description": "The Mask ROI shape is a link to a BinData object that is a BIT mask drawn on\ntop of the image as an ROI.\n\nIt is applied at the same scale, pixel to pixel, as the Image the\nROI is applied to, unless a transform is applied at the shape level.\n\nAttributes\n----------\nbin_data : BinData\n    (The Mask BinData).\nx : float\n    The X coordinate of the left side of the image. [units pixels]\ny : float\n    The Y coordinate of the top side of the image. [units pixels]\nwidth : float\n    The width of the mask. [units pixels]\nheight : float\n    The height of the mask. [units pixels]",
            "properties": {
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AffineTransform"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Transform",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "fill_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillColor",
                    "title": "Fill Color",
                    "type": "Attribute"
                },
                "fill_rule": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FillRule"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillRule",
                    "type": "Attribute"
                },
                "stroke_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeColor",
                    "title": "Stroke Color",
                    "type": "Attribute"
                },
                "stroke_width": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeWidth",
                    "title": "Stroke Width",
                    "type": "Attribute"
                },
                "stroke_width_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pixel",
                    "name": "StrokeWidthUnit",
                    "type": "Attribute"
                },
                "stroke_dash_array": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeDashArray",
                    "title": "Stroke Dash Array",
                    "type": "Attribute"
                },
                "text": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Text",
                    "title": "Text",
                    "type": "Attribute"
                },
                "font_family": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontFamily"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontFamily",
                    "type": "Attribute"
                },
                "font_size": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FontSize",
                    "title": "Font Size",
                    "type": "Attribute"
                },
                "font_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pt",
                    "name": "FontSizeUnit",
                    "type": "Attribute"
                },
                "font_style": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontStyle"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontStyle",
                    "type": "Attribute"
                },
                "locked": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Locked",
                    "title": "Locked",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "the_z": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheZ",
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheT",
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheC",
                    "title": "The C",
                    "type": "Attribute"
                },
                "bin_data": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/BinData"
                        }
                    ],
                    "name": "BinData",
                    "required": true,
                    "type": "Element"
                },
                "x": {
                    "name": "X",
                    "required": true,
                    "title": "X",
                    "type": "Attribute"
                },
                "y": {
                    "name": "Y",
                    "required": true,
                    "title": "Y",
                    "type": "Attribute"
                },
                "width": {
                    "name": "Width",
                    "required": true,
                    "title": "Width",
                    "type": "Attribute"
                },
                "height": {
                    "name": "Height",
                    "required": true,
                    "title": "Height",
                    "type": "Attribute"
                }
            },
            "required": [
                "bin_data",
                "x",
                "y",
                "width",
                "height"
            ],
            "title": "Mask",
            "type": "object"
        },
        "MetadataOnly": {
            "description": "This place holder means there is on pixel data in this file.",
            "properties": {},
            "title": "MetadataOnly",
            "type": "object"
        },
        "MicrobeamManipulation": {
            "description": "Defines a microbeam operation type and the region of the image it was\napplied to.\n\nThe LightSourceRef element is a reference to a LightSource specified\nin the Instrument element which was used for a technique other than\nillumination for the purpose of imaging. For example, a laser used\nfor photobleaching.\n\nAttributes\n----------\ndescription : None | str\n    A description for the Microbeam Manipulation. [plain-text multi-line\n    string]\nroi_ref : list[ROIRef]\n    (The MicrobeamManipulation ROIRefs).\nexperimenter_ref : ExperimenterRef\n    (The MicrobeamManipulation ExperimenterRef).\nlight_source_settings : list[LightSourceSettings]\n    (The MicrobeamManipulation LightSourceSettingsCombinations).\nid : str\n    (The MicrobeamManipulation ID).\ntype : list[MicrobeamManipulation_value]\n    The type of manipulation performed.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "roi_refs": {
                    "items": {
                        "$ref": "#/$defs/ROIRef"
                    },
                    "minItems": 1,
                    "min_occurs": 1,
                    "name": "ROIRef",
                    "title": "Roi Refs",
                    "type": "Element"
                },
                "experimenter_ref": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/ExperimenterRef"
                        }
                    ],
                    "name": "ExperimenterRef",
                    "required": true,
                    "type": "Element"
                },
                "light_source_settings_combinations": {
                    "items": {
                        "$ref": "#/$defs/LightSourceSettings"
                    },
                    "name": "LightSourceSettings",
                    "title": "Light Source Settings Combinations",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:MicrobeamManipulation:\\S+)|(MicrobeamManipulation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "type": {
                    "items": {
                        "$ref": "#/$defs/MicrobeamManipulation_value"
                    },
                    "name": "Type",
                    "title": "Type",
                    "tokens": true,
                    "type": "Attribute"
                }
            },
            "required": [
                "experimenter_ref"
            ],
            "title": "MicrobeamManipulation",
            "type": "object"
        },
        "MicrobeamManipulationRef": {
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:MicrobeamManipulation:\\S+)|(MicrobeamManipulation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "MicrobeamManipulationRef",
            "type": "object"
        },
        "MicrobeamManipulation_value": {
            "enum": [
                "FRAP",
                "FLIP",
                "InverseFRAP",
                "Photoablation",
                "Photoactivation",
                "Uncaging",
                "OpticalTrapping",
                "Other"
            ],
            "title": "MicrobeamManipulation_value",
            "type": "string"
        },
        "Microscope": {
            "description": "The microscope's manufacturer specification.",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Microscope_Type"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Type",
                    "type": "Attribute"
                }
            },
            "title": "Microscope",
            "type": "object"
        },
        "Microscope_Type": {
            "enum": [
                "Upright",
                "Inverted",
                "Dissection",
                "Electrophysiology",
                "Other"
            ],
            "title": "Microscope_Type",
            "type": "string"
        },
        "NamingConvention": {
            "description": "Predefined list of values for the well labels.\n\nAttributes\n----------\nLETTER : str\n    While the label type 'number' has a clear meaning the 'letter' type is more\n    complex. If you have less than 26 values use letters A to Z. Once you get\n    more than 26 values there are several different approaches in use. One we\n    have see include: Single letter, then double letter each running A to Z,\n    right first e.g. A, B, C, ... X, Y, Z, AA, AB, AC, ... AY, AZ, BA, BB, ...\n    This is the format used by Microsoft Excel so users may be familiar with\n    it. This is the approach we use in the OMERO client applications.\n    CAPITALsmall, each running A to Z, small first e.g. Aa, Ab, Ac, ... Ax, Ay,\n    Az, Ba, Bb, Bc, ... By, Bz, Ca, Cb, ... This is in use by some plate\n    manufactures. Single letter, then double letter, then triple letter, and so\n    on e.g. A, B, C, ... X, Y, Z, AA, BB, CC, ... YY, ZZ, AAA, BBB, ... This\n    has the advantage that the first 26 are the same as the standard but has a\n    problem an the labels get wider and wider leading to user interface\n    problems.\nNUMBER : str\n    1, 2, 3, ...",
            "enum": [
                "letter",
                "number"
            ],
            "title": "NamingConvention",
            "type": "string"
        },
        "Objective": {
            "description": "A description of the microscope's objective lens.\n\nRequired elements include the lens numerical aperture,\nand the magnification, both of which a floating\npoint (real) numbers.\nThe values are those that are fixed for a particular\nobjective: either because it has been manufactured to\nthis specification or the value has been measured on\nthis particular objective.\nCorrection: This is the type of correction coating applied to this lens.\nImmersion: This is the types of immersion medium the lens is designed to\nwork with. It is not the same as 'Medium' in ObjectiveRef (a\nsingle type) as here Immersion can have compound values like 'Multi'.\nLensNA: The numerical aperture of the lens (as a float)\nNominalMagnification: The specified magnification e.g. x10\nCalibratedMagnification: The measured magnification e.g. x10.3\nWorkingDistance: WorkingDistance of the lens.\n\nAttributes\n----------\nannotation_ref : list[AnnotationRef]\n    (The Objective AnnotationRefs).\nid : str\n    (The Objective ID).\ncorrection : None | Objective_Correction\n    The correction applied to the lens\nimmersion : None | Objective_Immersion\n    The immersion medium the lens is designed for\nlens_na : None | float\n    The numerical aperture of the lens expressed as a floating point (real)\n    number. Expected range 0.02 - 1.5 [units:none]\nnominal_magnification : None | float\n    The magnification of the lens as specified by the manufacturer - i.e. '60'\n    is a 60X lens. [units:none] Note: The type of this has been changed from\n    int to float to allow the specification of additional lenses e.g. 0.5X lens\ncalibrated_magnification : None | float\n    The magnification of the lens as measured by a calibration process- i.e.\n    '59.987' for a 60X lens. [units:none]\nworking_distance : None | float\n    The working distance of the lens expressed as a floating point (real)\n    number. Units are set by WorkingDistanceUnit.\nworking_distance_unit : UnitsLength\n    The units of the working distance - default:microns[µm].\niris : None | bool\n    Records whether or not the objective was fitted with an Iris. [flag]",
            "properties": {
                "manufacturer": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Manufacturer",
                    "title": "Manufacturer",
                    "type": "Attribute"
                },
                "model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Model",
                    "title": "Model",
                    "type": "Attribute"
                },
                "serial_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "SerialNumber",
                    "title": "Serial Number",
                    "type": "Attribute"
                },
                "lot_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LotNumber",
                    "title": "Lot Number",
                    "type": "Attribute"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Objective:\\S+)|(Objective:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "correction": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Objective_Correction"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Correction",
                    "type": "Attribute"
                },
                "immersion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Objective_Immersion"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Immersion",
                    "type": "Attribute"
                },
                "lens_na": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "LensNA",
                    "title": "Lens Na",
                    "type": "Attribute"
                },
                "nominal_magnification": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "NominalMagnification",
                    "title": "Nominal Magnification",
                    "type": "Attribute"
                },
                "calibrated_magnification": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "CalibratedMagnification",
                    "title": "Calibrated Magnification",
                    "type": "Attribute"
                },
                "working_distance": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "WorkingDistance",
                    "title": "Working Distance",
                    "type": "Attribute"
                },
                "working_distance_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "µm",
                    "name": "WorkingDistanceUnit",
                    "type": "Attribute"
                },
                "iris": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Iris",
                    "title": "Iris",
                    "type": "Attribute"
                }
            },
            "title": "Objective",
            "type": "object"
        },
        "ObjectiveSettings": {
            "description": "This holds the setting applied to an objective as well as a reference to the\nobjective.\n\nThe ID is the objective used in this case.\n\nAttributes\n----------\nid : str\n    (The ObjectiveSettings ID).\ncorrection_collar : None | float\n    The CorrectionCollar is normally an adjustable ring on the objective. Each\n    has an arbitrary scale on it so the values is unit-less. [units:none]\nmedium : None | ObjectiveSettings_Medium\n    A description of a Medium used for the lens. The Medium is the actual\n    immersion medium used in this case.\nrefractive_index : None | float\n    The RefractiveIndex is that of the immersion medium. This is a ratio so it\n    also unit-less. [units:none]",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Objective:\\S+)|(Objective:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "correction_collar": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "CorrectionCollar",
                    "title": "Correction Collar",
                    "type": "Attribute"
                },
                "medium": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ObjectiveSettings_Medium"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Medium",
                    "type": "Attribute"
                },
                "refractive_index": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "RefractiveIndex",
                    "title": "Refractive Index",
                    "type": "Attribute"
                }
            },
            "title": "ObjectiveSettings",
            "type": "object"
        },
        "ObjectiveSettings_Medium": {
            "description": "A description of a Medium used for the lens.\n\nThe Medium is the actual immersion medium used in this case.",
            "enum": [
                "Air",
                "Oil",
                "Water",
                "Glycerol",
                "Other"
            ],
            "title": "ObjectiveSettings_Medium",
            "type": "string"
        },
        "Objective_Correction": {
            "enum": [
                "UV",
                "PlanApo",
                "PlanFluor",
                "SuperFluor",
                "VioletCorrected",
                "Achro",
                "Achromat",
                "Fluor",
                "Fl",
                "Fluar",
                "Neofluar",
                "Fluotar",
                "Apo",
                "PlanNeofluar",
                "Other"
            ],
            "title": "Objective_Correction",
            "type": "string"
        },
        "Objective_Immersion": {
            "enum": [
                "Oil",
                "Water",
                "WaterDipping",
                "Air",
                "Multi",
                "Glycerol",
                "Other"
            ],
            "title": "Objective_Immersion",
            "type": "string"
        },
        "PixelType": {
            "description": "The number size/kind used to represent a pixel.\n\nAttributes\n----------\nINT8 : str\n    8 bit signed integer.\nINT16 : str\n    16 bit signed integer.\nINT32 : str\n    32 bit signed integer.\nUINT8 : str\n    8 bit unsigned integer.\nUINT16 : str\n    16 bit unsigned integer.\nUINT32 : str\n    32 bit unsigned integer.\nFLOAT : str\n    single-precision floating point.\nDOUBLE : str\n    double-precision floating point.\nCOMPLEXFLOAT : str\n    complex single-precision floating point.\nCOMPLEXDOUBLE : str\n    complex double-precision floating point.\nBIT : str\n    bit mask.",
            "enum": [
                "int8",
                "int16",
                "int32",
                "uint8",
                "uint16",
                "uint32",
                "float",
                "double",
                "complex",
                "double-complex",
                "bit"
            ],
            "title": "PixelType",
            "type": "string"
        },
        "Pixels": {
            "description": "Pixels is going to be removed in the future, but it is still required.\n\nThis is just notice that the contents of Pixels will be moved up to\nImage in a future release. This is because there has only been 1\nPixels object in each Image for some time. The concept of multiple\nPixels sets for one Image failed to take off. It is therefore\nredundant. The Image will be unreadable if any of the required Pixel\nattributes are missing. The Pixels themselves can be stored within\nthe OME-XML compressed by plane, and encoded in Base64. Or the\nPixels may be stored in TIFF format. The Pixels element should\ncontain a list of BinData or TiffData, each containing a single\nplane of pixels. These Pixels elements, when read in document order,\nmust produce a 5-D pixel array of the size specified in this\nelement, and in the dimension order specified by 'DimensionOrder'.\nAll of the values in the Pixels object when present should match the\nsame value stored in any associated TIFF format (e.g. SizeX should\nbe the same). Where there is a mismatch our readers will take the\nvalue from the TIFF structure as overriding the value in the OME-\nXML. This is simply a pragmatic decision as it increases the\nlikelihood of reading data from a slightly incorrect file.\n\nAttributes\n----------\nchannel : list[Channel]\n    (The Pixels Channels).\nbin_data : list[BinData]\n    (The Pixels BinDataBlocks).\ntiff_data : list[TiffData]\n    (The Pixels TiffDataBlocks).\nmetadata_only : None | MetadataOnly\n    (The Pixels MetadataOnly).\nplane : list[Plane]\n    (The Pixels Planes).\nid : str\n    (The Pixels ID).\ndimension_order : Pixels_DimensionOrder\n    The order in which the individual planes of data are interleaved.\ntype : PixelType\n    The variable type used to represent each pixel in the image.\nsignificant_bits : None | int\n    The number of bits within the type storing each pixel that are significant.\n    e.g. you can store 12 bit data within a 16 bit type. This does not reduce\n    the storage requirements but can be a useful indicator when processing or\n    viewing the image data.\ninterleaved : None | bool\n    How the channels are arranged within the data block: true if channels are\n    stored RGBRGBRGB...; false if channels are stored RRR...GGG...BBB...\nbig_endian : None | bool\n    This is true if the pixels data was written in BigEndian order. If this\n    value is present it should match the value used in BinData or TiffData. If\n    it does not a reader should honour the value used in the BinData or\n    TiffData. This values is useful for MetadataOnly files and is to allow for\n    future storage solutions.\nsize_x : int\n    Dimensional size of pixel data array [units:none]\nsize_y : int\n    Dimensional size of pixel data array [units:none]\nsize_z : int\n    Dimensional size of pixel data array [units:none]\nsize_c : int\n    Dimensional size of pixel data array [units:none]\nsize_t : int\n    Dimensional size of pixel data array [units:none]\nphysical_size_x : None | float\n    Physical size of a pixel. Units are set by PhysicalSizeXUnit.\nphysical_size_x_unit : UnitsLength\n    The units of the physical size of a pixel - default:microns[µm].\nphysical_size_y : None | float\n    Physical size of a pixel. Units are set by PhysicalSizeYUnit.\nphysical_size_y_unit : UnitsLength\n    The units of the physical size of a pixel - default:microns[µm].\nphysical_size_z : None | float\n    Physical size of a pixel. Units are set by PhysicalSizeZUnit.\nphysical_size_z_unit : UnitsLength\n    The units of the physical size of a pixel - default:microns[µm].\ntime_increment : None | float\n    TimeIncrement is used for time series that have a global timing\n    specification instead of per-timepoint timing info. For example in a video\n    stream. Units are set by TimeIncrementUnit.\ntime_increment_unit : UnitsTime\n    The units of the TimeIncrement - default:seconds[s].",
            "properties": {
                "channels": {
                    "items": {
                        "$ref": "#/$defs/Channel"
                    },
                    "name": "Channel",
                    "title": "Channels",
                    "type": "Element"
                },
                "bin_data_blocks": {
                    "items": {
                        "$ref": "#/$defs/BinData"
                    },
                    "name": "BinData",
                    "title": "Bin Data Blocks",
                    "type": "Element"
                },
                "tiff_data_blocks": {
                    "items": {
                        "$ref": "#/$defs/TiffData"
                    },
                    "name": "TiffData",
                    "title": "Tiff Data Blocks",
                    "type": "Element"
                },
                "metadata_only": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/MetadataOnly"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "MetadataOnly",
                    "type": "Element"
                },
                "planes": {
                    "items": {
                        "$ref": "#/$defs/Plane"
                    },
                    "name": "Plane",
                    "title": "Planes",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Pixels:\\S+)|(Pixels:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "dimension_order": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/Pixels_DimensionOrder"
                        }
                    ],
                    "name": "DimensionOrder",
                    "required": true,
                    "type": "Attribute"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/PixelType"
                        }
                    ],
                    "name": "Type",
                    "required": true,
                    "type": "Attribute"
                },
                "significant_bits": {
                    "anyOf": [
                        {
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 1,
                    "name": "SignificantBits",
                    "title": "Significant Bits",
                    "type": "Attribute"
                },
                "interleaved": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Interleaved",
                    "title": "Interleaved",
                    "type": "Attribute"
                },
                "big_endian": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "BigEndian",
                    "title": "Big Endian",
                    "type": "Attribute"
                },
                "size_x": {
                    "min_inclusive": 1,
                    "minimum": 1,
                    "name": "SizeX",
                    "required": true,
                    "title": "Size X",
                    "type": "Attribute"
                },
                "size_y": {
                    "min_inclusive": 1,
                    "minimum": 1,
                    "name": "SizeY",
                    "required": true,
                    "title": "Size Y",
                    "type": "Attribute"
                },
                "size_z": {
                    "min_inclusive": 1,
                    "minimum": 1,
                    "name": "SizeZ",
                    "required": true,
                    "title": "Size Z",
                    "type": "Attribute"
                },
                "size_c": {
                    "min_inclusive": 1,
                    "minimum": 1,
                    "name": "SizeC",
                    "required": true,
                    "title": "Size C",
                    "type": "Attribute"
                },
                "size_t": {
                    "min_inclusive": 1,
                    "minimum": 1,
                    "name": "SizeT",
                    "required": true,
                    "title": "Size T",
                    "type": "Attribute"
                },
                "physical_size_x": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "PhysicalSizeX",
                    "title": "Physical Size X",
                    "type": "Attribute"
                },
                "physical_size_x_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "µm",
                    "name": "PhysicalSizeXUnit",
                    "type": "Attribute"
                },
                "physical_size_y": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "PhysicalSizeY",
                    "title": "Physical Size Y",
                    "type": "Attribute"
                },
                "physical_size_y_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "µm",
                    "name": "PhysicalSizeYUnit",
                    "type": "Attribute"
                },
                "physical_size_z": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "PhysicalSizeZ",
                    "title": "Physical Size Z",
                    "type": "Attribute"
                },
                "physical_size_z_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "µm",
                    "name": "PhysicalSizeZUnit",
                    "type": "Attribute"
                },
                "time_increment": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "TimeIncrement",
                    "title": "Time Increment",
                    "type": "Attribute"
                },
                "time_increment_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsTime"
                        }
                    ],
                    "default": "s",
                    "name": "TimeIncrementUnit",
                    "type": "Attribute"
                }
            },
            "required": [
                "dimension_order",
                "type",
                "size_x",
                "size_y",
                "size_z",
                "size_c",
                "size_t"
            ],
            "title": "Pixels",
            "type": "object"
        },
        "Pixels_DimensionOrder": {
            "enum": [
                "XYZCT",
                "XYZTC",
                "XYCTZ",
                "XYCZT",
                "XYTCZ",
                "XYTZC"
            ],
            "title": "Pixels_DimensionOrder",
            "type": "string"
        },
        "Plane": {
            "description": "The Plane object holds microscope stage and image timing data for a given\nchannel/z-section/timepoint.\n\nAttributes\n----------\nhash_sha1 : None | bytes\n    (The Plane HashSHA1).\nannotation_ref : list[AnnotationRef]\n    (The Plane AnnotationRefs).\nthe_z : int\n    The Z-section this plane is for. [units:none] This is numbered from 0.\nthe_t : int\n    The timepoint this plane is for. [units:none] This is numbered from 0.\nthe_c : int\n    The channel this plane is for. [units:none] This is numbered from 0.\ndelta_t : None | float\n    Time since the beginning of the experiment. Units are set by DeltaTUnit.\ndelta_t_unit : UnitsTime\n    The units of the DeltaT - default:seconds[s].\nexposure_time : None | float\n    The length of the exposure. Units are set by ExposureTimeUnit.\nexposure_time_unit : UnitsTime\n    The units of the ExposureTime - default:seconds[s].\nposition_x : None | float\n    The X position of the stage. Units are set by PositionXUnit.\nposition_x_unit : UnitsLength\n    The units of the X stage position - default:[reference frame].\nposition_y : None | float\n    The Y position of the stage. Units are set by PositionYUnit.\nposition_y_unit : UnitsLength\n    The units of the Y stage position - default:[reference frame].\nposition_z : None | float\n    The Z position of the stage. Units are set by PositionZUnit.\nposition_z_unit : UnitsLength\n    The units of the Z stage position - default:[reference frame].",
            "properties": {
                "hash_sha1": {
                    "anyOf": [
                        {
                            "format": "binary",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "format": "base16",
                    "length": 20,
                    "name": "HashSHA1",
                    "title": "Hash Sha1",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "the_z": {
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "TheZ",
                    "required": true,
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "TheT",
                    "required": true,
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "TheC",
                    "required": true,
                    "title": "The C",
                    "type": "Attribute"
                },
                "delta_t": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "DeltaT",
                    "title": "Delta T",
                    "type": "Attribute"
                },
                "delta_t_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsTime"
                        }
                    ],
                    "default": "s",
                    "name": "DeltaTUnit",
                    "type": "Attribute"
                },
                "exposure_time": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExposureTime",
                    "title": "Exposure Time",
                    "type": "Attribute"
                },
                "exposure_time_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsTime"
                        }
                    ],
                    "default": "s",
                    "name": "ExposureTimeUnit",
                    "type": "Attribute"
                },
                "position_x": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "PositionX",
                    "title": "Position X",
                    "type": "Attribute"
                },
                "position_x_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "PositionXUnit",
                    "type": "Attribute"
                },
                "position_y": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "PositionY",
                    "title": "Position Y",
                    "type": "Attribute"
                },
                "position_y_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "PositionYUnit",
                    "type": "Attribute"
                },
                "position_z": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "PositionZ",
                    "title": "Position Z",
                    "type": "Attribute"
                },
                "position_z_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "PositionZUnit",
                    "type": "Attribute"
                }
            },
            "required": [
                "the_z",
                "the_t",
                "the_c"
            ],
            "title": "Plane",
            "type": "object"
        },
        "Plate": {
            "description": "This element identifies microtiter plates within a screen.\n\nA plate can belong to more than one screen. The Screen(s) that a\nplate belongs to are specified by the ScreenRef element. The Plate\nID and Name attributes are required. The Wells in a plate are\nnumbers from the top-left corner in a grid starting at zero. i.e.\nThe top-left well of a plate is index (0,0)\n\nAttributes\n----------\ndescription : None | str\n    A description for the plate.\nwell : list[Well]\n    (The Plate Wells).\nannotation_ref : list[AnnotationRef]\n    (The Plate AnnotationRefs).\nplate_acquisition : list[PlateAcquisition]\n    (The Plate PlateAcquisitions).\nid : str\n    (The Plate ID).\nname : None | str\n    The Name identifies the plate to the user. It is used much like the ID, and\n    so must be unique within the document. If a plate name is not available\n    when one is needed it will be constructed in the following order: 1. If\n    name is available use it. 2. If not use \"Start time - End time\" (NOTE: Not\n    a subtraction! A string representation of the two times separated by a\n    dash.) 3. If these times are not available use the Plate ID.\nstatus : None | str\n    A textual annotation of the current state of the plate with respect to the\n    experiment work-flow; e.g. 1. Seed cell: done; 2. Transfection: done;\n    3. Gel doc: todo.\nexternal_identifier : None | str\n    The ExternalIdentifier attribute may contain a reference to an external\n    database.\ncolumn_naming_convention : None | NamingConvention\n    The ColumnNamingConvention\nrow_naming_convention : None | NamingConvention\n    The RowNamingConvention\nwell_origin_x : None | float\n    This defines the X position to use for the origin of the fields (individual\n    images) taken in a well. It is used with the X in the WellSample to display\n    the fields in the correct position relative to each other. Each Well in the\n    plate has the same well origin. Units are set by WellOriginXUnit. In the\n    OMERO clients by convention we display the WellOrigin in the center of the\n    view.\nwell_origin_x_unit : UnitsLength\n    The units of the well origin in X - default:reference frame.\nwell_origin_y : None | float\n    This defines the Y position to use for the origin of the fields (individual\n    images) taken in a well. It is used with the Y in the WellSample to display\n    the fields in the correct position relative to each other. Each Well in the\n    plate has the same well origin.  Units are set by WellOriginYUnit. In the\n    OMERO clients by convention we display the WellOrigin in the center of the\n    view.\nwell_origin_y_unit : UnitsLength\n    The units of the well origin in Y - default:reference frame.\nrows : None | int\n    The number of rows in the plate\ncolumns : None | int\n    The number of columns in the plate\nfield_index : None | int\n    The index of the WellSample to display as the default Field",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "wells": {
                    "items": {
                        "$ref": "#/$defs/Well"
                    },
                    "name": "Well",
                    "title": "Wells",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "plate_acquisitions": {
                    "items": {
                        "$ref": "#/$defs/PlateAcquisition"
                    },
                    "name": "PlateAcquisition",
                    "title": "Plate Acquisitions",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Plate:\\S+)|(Plate:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                },
                "status": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Status",
                    "title": "Status",
                    "type": "Attribute"
                },
                "external_identifier": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExternalIdentifier",
                    "title": "External Identifier",
                    "type": "Attribute"
                },
                "column_naming_convention": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/NamingConvention"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ColumnNamingConvention",
                    "type": "Attribute"
                },
                "row_naming_convention": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/NamingConvention"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "RowNamingConvention",
                    "type": "Attribute"
                },
                "well_origin_x": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "WellOriginX",
                    "title": "Well Origin X",
                    "type": "Attribute"
                },
                "well_origin_x_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "WellOriginXUnit",
                    "type": "Attribute"
                },
                "well_origin_y": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "WellOriginY",
                    "title": "Well Origin Y",
                    "type": "Attribute"
                },
                "well_origin_y_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "WellOriginYUnit",
                    "type": "Attribute"
                },
                "rows": {
                    "anyOf": [
                        {
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 1,
                    "name": "Rows",
                    "title": "Rows",
                    "type": "Attribute"
                },
                "columns": {
                    "anyOf": [
                        {
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 1,
                    "name": "Columns",
                    "title": "Columns",
                    "type": "Attribute"
                },
                "field_index": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FieldIndex",
                    "title": "Field Index",
                    "type": "Attribute"
                }
            },
            "title": "Plate",
            "type": "object"
        },
        "PlateAcquisition": {
            "description": "PlateAcquisition is used to describe a single acquisition run for a plate.\n\nThis object is used to record the set of images acquired in a single\nacquisition run. The Images for this run are linked to\nPlateAcquisition through WellSample.\n\nAttributes\n----------\ndescription : None | str\n    A description for the PlateAcquisition.\nwell_sample_ref : list[WellSampleRef]\n    (The PlateAcquisition WellSampleRefs).\nannotation_ref : list[AnnotationRef]\n    (The PlateAcquisition AnnotationRefs).\nid : str\n    (The PlateAcquisition ID).\nname : None | str\n    (The PlateAcquisition Name).\nend_time : None | datetime\n    Time when the last image of this acquisition was collected\nstart_time : None | datetime\n    Time when the first image of this acquisition was collected\nmaximum_field_count : None | int\n    The maximum number of fields (well samples) in any well in this\n    PlateAcquisition. This is only used to speed up user interaction by\n    stopping the reading of every well sample.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "well_sample_refs": {
                    "items": {
                        "$ref": "#/$defs/WellSampleRef"
                    },
                    "name": "WellSampleRef",
                    "title": "Well Sample Refs",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:PlateAcquisition:\\S+)|(PlateAcquisition:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                },
                "end_time": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "EndTime",
                    "title": "End Time",
                    "type": "Attribute"
                },
                "start_time": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StartTime",
                    "title": "Start Time",
                    "type": "Attribute"
                },
                "maximum_field_count": {
                    "anyOf": [
                        {
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 1,
                    "name": "MaximumFieldCount",
                    "title": "Maximum Field Count",
                    "type": "Attribute"
                }
            },
            "title": "PlateAcquisition",
            "type": "object"
        },
        "PlateRef": {
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Plate:\\S+)|(Plate:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "PlateRef",
            "type": "object"
        },
        "Point": {
            "description": "Attributes\n----------\nx : float\n    The X coordinate of the point. [units pixels]\ny : float\n    The Y coordinate of the point. [units pixels]",
            "properties": {
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AffineTransform"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Transform",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "fill_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillColor",
                    "title": "Fill Color",
                    "type": "Attribute"
                },
                "fill_rule": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FillRule"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillRule",
                    "type": "Attribute"
                },
                "stroke_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeColor",
                    "title": "Stroke Color",
                    "type": "Attribute"
                },
                "stroke_width": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeWidth",
                    "title": "Stroke Width",
                    "type": "Attribute"
                },
                "stroke_width_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pixel",
                    "name": "StrokeWidthUnit",
                    "type": "Attribute"
                },
                "stroke_dash_array": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeDashArray",
                    "title": "Stroke Dash Array",
                    "type": "Attribute"
                },
                "text": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Text",
                    "title": "Text",
                    "type": "Attribute"
                },
                "font_family": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontFamily"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontFamily",
                    "type": "Attribute"
                },
                "font_size": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FontSize",
                    "title": "Font Size",
                    "type": "Attribute"
                },
                "font_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pt",
                    "name": "FontSizeUnit",
                    "type": "Attribute"
                },
                "font_style": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontStyle"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontStyle",
                    "type": "Attribute"
                },
                "locked": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Locked",
                    "title": "Locked",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "the_z": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheZ",
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheT",
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheC",
                    "title": "The C",
                    "type": "Attribute"
                },
                "x": {
                    "name": "X",
                    "required": true,
                    "title": "X",
                    "type": "Attribute"
                },
                "y": {
                    "name": "Y",
                    "required": true,
                    "title": "Y",
                    "type": "Attribute"
                }
            },
            "required": [
                "x",
                "y"
            ],
            "title": "Point",
            "type": "object"
        },
        "Polygon": {
            "description": "The Polygon defines closed shapes formed of straight lines.\n\nNote: Polygon uses counterclockwise winding (this is the\ndefault OpenGL behavior)\n\nAttributes\n----------\npoints : str\n    The points of the Polygon are defined as a list of comma separated x,y\n    coordinates seperated by spaces like \"x1,y1 x2,y2 x3,y3\" e.g. \"0,0 1,2 3,5\"",
            "properties": {
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AffineTransform"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Transform",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "fill_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillColor",
                    "title": "Fill Color",
                    "type": "Attribute"
                },
                "fill_rule": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FillRule"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillRule",
                    "type": "Attribute"
                },
                "stroke_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeColor",
                    "title": "Stroke Color",
                    "type": "Attribute"
                },
                "stroke_width": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeWidth",
                    "title": "Stroke Width",
                    "type": "Attribute"
                },
                "stroke_width_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pixel",
                    "name": "StrokeWidthUnit",
                    "type": "Attribute"
                },
                "stroke_dash_array": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeDashArray",
                    "title": "Stroke Dash Array",
                    "type": "Attribute"
                },
                "text": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Text",
                    "title": "Text",
                    "type": "Attribute"
                },
                "font_family": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontFamily"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontFamily",
                    "type": "Attribute"
                },
                "font_size": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FontSize",
                    "title": "Font Size",
                    "type": "Attribute"
                },
                "font_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pt",
                    "name": "FontSizeUnit",
                    "type": "Attribute"
                },
                "font_style": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontStyle"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontStyle",
                    "type": "Attribute"
                },
                "locked": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Locked",
                    "title": "Locked",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "the_z": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheZ",
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheT",
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheC",
                    "title": "The C",
                    "type": "Attribute"
                },
                "points": {
                    "name": "Points",
                    "required": true,
                    "title": "Points",
                    "type": "Attribute"
                }
            },
            "required": [
                "points"
            ],
            "title": "Polygon",
            "type": "object"
        },
        "Polyline": {
            "description": "The Polyline defines open shapes formed of straight lines.\n\nNote: Polyline uses counterclockwise winding (this is the\ndefault OpenGL behavior)\n\nAttributes\n----------\npoints : str\n    The points of the polyline are defined as a list of comma separated x,y\n    coordinates seperated by spaces like \"x1,y1 x2,y2 x3,y3\" e.g. \"0,0 1,2 3,5\"\nmarker_start : None | Marker\n    (The Polyline MarkerStart).\nmarker_end : None | Marker\n    (The Polyline MarkerEnd).",
            "properties": {
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AffineTransform"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Transform",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "fill_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillColor",
                    "title": "Fill Color",
                    "type": "Attribute"
                },
                "fill_rule": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FillRule"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillRule",
                    "type": "Attribute"
                },
                "stroke_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeColor",
                    "title": "Stroke Color",
                    "type": "Attribute"
                },
                "stroke_width": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeWidth",
                    "title": "Stroke Width",
                    "type": "Attribute"
                },
                "stroke_width_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pixel",
                    "name": "StrokeWidthUnit",
                    "type": "Attribute"
                },
                "stroke_dash_array": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeDashArray",
                    "title": "Stroke Dash Array",
                    "type": "Attribute"
                },
                "text": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Text",
                    "title": "Text",
                    "type": "Attribute"
                },
                "font_family": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontFamily"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontFamily",
                    "type": "Attribute"
                },
                "font_size": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FontSize",
                    "title": "Font Size",
                    "type": "Attribute"
                },
                "font_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pt",
                    "name": "FontSizeUnit",
                    "type": "Attribute"
                },
                "font_style": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontStyle"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontStyle",
                    "type": "Attribute"
                },
                "locked": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Locked",
                    "title": "Locked",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "the_z": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheZ",
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheT",
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheC",
                    "title": "The C",
                    "type": "Attribute"
                },
                "points": {
                    "name": "Points",
                    "required": true,
                    "title": "Points",
                    "type": "Attribute"
                },
                "marker_start": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Marker"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "MarkerStart",
                    "type": "Attribute"
                },
                "marker_end": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Marker"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "MarkerEnd",
                    "type": "Attribute"
                }
            },
            "required": [
                "points"
            ],
            "title": "Polyline",
            "type": "object"
        },
        "Project": {
            "description": "The Project ID is required. Datasets can be grouped into projects using a\nmany-to-many relationship.\n\nA Dataset may belong to one or more Projects by including one or more ProjectRef elements which refer to Project IDs.\nProjects do not directly contain images - only by virtue of containing datasets, which themselves contain images.\n\nAttributes\n----------\ndescription : None | str\n    A description for the project. [plain-text multi-line string]\nexperimenter_ref : None | ExperimenterRef\n    (The Project ExperimenterRef).\nexperimenter_group_ref : None | ExperimenterGroupRef\n    (The Project ExperimenterGroupRef).\ndataset_ref : list[DatasetRef]\n    (The Project DatasetRefs).\nannotation_ref : list[AnnotationRef]\n    (The Project AnnotationRefs).\nname : None | str\n    (The Project Name).\nid : str\n    (The Project ID).",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "experimenter_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExperimenterRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExperimenterRef",
                    "type": "Element"
                },
                "experimenter_group_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ExperimenterGroupRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExperimenterGroupRef",
                    "type": "Element"
                },
                "dataset_refs": {
                    "items": {
                        "$ref": "#/$defs/DatasetRef"
                    },
                    "name": "DatasetRef",
                    "title": "Dataset Refs",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Project:\\S+)|(Project:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "Project",
            "type": "object"
        },
        "Pump": {
            "description": "The Pump element is a reference to a LightSource.\n\nIt is used within the Laser element to specify the light source for\nthe laser's pump (if any).",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "Pump",
            "type": "object"
        },
        "ROI": {
            "description": "A four dimensional 'Region of Interest'.\n\nIf they are not used, and the Image has more than one plane, the\nentire set of planes is assumed to be included in the ROI. Multiple\nROIs may be specified.\n\nAttributes\n----------\nunion : \"ROI.Union\"\n    (The ROI Union).\nannotation_ref : list[AnnotationRef]\n    (The ROI AnnotationRefs).\ndescription : None | str\n    A description for the ROI. [plain-text multi-line string]\nid : str\n    (The ROI ID).\nname : None | str\n    The Name identifies the ROI to the user. [plain-text string]",
            "properties": {
                "union": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/Union"
                        }
                    ],
                    "name": "Union",
                    "required": true,
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:\\S+)|(\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                }
            },
            "title": "ROI",
            "type": "object"
        },
        "ROIRef": {
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:\\S+)|(\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "ROIRef",
            "type": "object"
        },
        "Reagent": {
            "description": "Reagent is used to describe a chemical or some other physical experimental\nparameter.\n\nAttributes\n----------\ndescription : None | str\n    A long description for the reagent.\nannotation_ref : list[AnnotationRef]\n    (The Reagent AnnotationRefs).\nid : str\n    (The Reagent ID).\nname : None | str\n    A short name for the reagent\nreagent_identifier : None | str\n    This is a reference to an external (to OME) representation of the Reagent.\n    It serves as a foreign key into an external database. - It is sometimes\n    referred to as ExternalIdentifier.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Reagent:\\S+)|(Reagent:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                },
                "reagent_identifier": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ReagentIdentifier",
                    "title": "Reagent Identifier",
                    "type": "Attribute"
                }
            },
            "title": "Reagent",
            "type": "object"
        },
        "ReagentRef": {
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Reagent:\\S+)|(Reagent:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "ReagentRef",
            "type": "object"
        },
        "Rectangle": {
            "description": "A simple rectangle object.\n\nIf rotation is required apply a transformation at the Shape level.\n\nAttributes\n----------\nx : float\n    The X value of the left edge or the rectangle. [units pixels]\ny : float\n    The y value of the top edge or the rectangle. [units pixels]\nwidth : float\n    The width of the rectangle. [units pixels]\nheight : float\n    The height of the rectangle. [units pixels]",
            "properties": {
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AffineTransform"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Transform",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "fill_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillColor",
                    "title": "Fill Color",
                    "type": "Attribute"
                },
                "fill_rule": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FillRule"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FillRule",
                    "type": "Attribute"
                },
                "stroke_color": {
                    "anyOf": [
                        {
                            "format": "color",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeColor",
                    "title": "Stroke Color",
                    "type": "Attribute"
                },
                "stroke_width": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeWidth",
                    "title": "Stroke Width",
                    "type": "Attribute"
                },
                "stroke_width_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pixel",
                    "name": "StrokeWidthUnit",
                    "type": "Attribute"
                },
                "stroke_dash_array": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "StrokeDashArray",
                    "title": "Stroke Dash Array",
                    "type": "Attribute"
                },
                "text": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Text",
                    "title": "Text",
                    "type": "Attribute"
                },
                "font_family": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontFamily"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontFamily",
                    "type": "Attribute"
                },
                "font_size": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "FontSize",
                    "title": "Font Size",
                    "type": "Attribute"
                },
                "font_size_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "pt",
                    "name": "FontSizeUnit",
                    "type": "Attribute"
                },
                "font_style": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Shape_FontStyle"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FontStyle",
                    "type": "Attribute"
                },
                "locked": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Locked",
                    "title": "Locked",
                    "type": "Attribute"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "the_z": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheZ",
                    "title": "The Z",
                    "type": "Attribute"
                },
                "the_t": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheT",
                    "title": "The T",
                    "type": "Attribute"
                },
                "the_c": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "TheC",
                    "title": "The C",
                    "type": "Attribute"
                },
                "x": {
                    "name": "X",
                    "required": true,
                    "title": "X",
                    "type": "Attribute"
                },
                "y": {
                    "name": "Y",
                    "required": true,
                    "title": "Y",
                    "type": "Attribute"
                },
                "width": {
                    "name": "Width",
                    "required": true,
                    "title": "Width",
                    "type": "Attribute"
                },
                "height": {
                    "name": "Height",
                    "required": true,
                    "title": "Height",
                    "type": "Attribute"
                }
            },
            "required": [
                "x",
                "y",
                "width",
                "height"
            ],
            "title": "Rectangle",
            "type": "object"
        },
        "Rights": {
            "description": "The rights holder of this data and the rights held.\n\nAttributes\n----------\nrights_holder : None | str\n    The rights holder for this data. [plain-text multi-line string] e.g.\n    \"Copyright (C) 2002 - 2016 Open Microscopy Environment\"\nrights_held : None | str\n    The rights held by the rights holder. [plain-text multi-line string] e.g.\n    \"All rights reserved\" or \"Creative Commons Attribution 3.0 Unported\n    License\"",
            "properties": {
                "rights_holder": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "RightsHolder",
                    "title": "Rights Holder",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "rights_held": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "RightsHeld",
                    "title": "Rights Held",
                    "type": "Element",
                    "white_space": "preserve"
                }
            },
            "title": "Rights",
            "type": "object"
        },
        "Screen": {
            "description": "The Screen element is a grouping for Plates.\n\nThe required attribute is the Screen's Name and ID - both must be unique within the document.\nThe Screen element may contain an ExternalRef attribute that refers to an external database.\nA description of the screen may be specified in the Description element.\nScreens may contain overlapping sets of Plates i.e.      Screens and Plates have a many-to-many relationship.\nPlates contain one or more ScreenRef elements to specify what screens they belong to.\n\nAttributes\n----------\ndescription : None | str\n    A description for the screen.\nreagent : list[Reagent]\n    (The Screen Reagents).\nplate_ref : list[\"Screen.PlateRef\"]\n    The PlateRef element is a reference to a Plate element. Screen elements may\n    have one or more PlateRef elements to define the plates that are part of\n    the screen. Plates may belong to more than one screen.\nannotation_ref : list[AnnotationRef]\n    (The Screen AnnotationRefs).\nid : str\n    (The Screen ID).\nname : None | str\n    (The Screen Name).\nprotocol_identifier : None | str\n    A pointer to an externally defined protocol, usually in a screening\n    database.\nprotocol_description : None | str\n    A description of the screen protocol; may contain very detailed information\n    to reproduce some of that found in a screening database.\nreagent_set_description : None | str\n    A description of the set of reagents; may contain very detailed information\n    to reproduce some of that information found in a screening database.\nreagent_set_identifier : None | str\n    A pointer to an externally defined set of reagents, usually in a screening\n    database/automation database.\ntype : None | str\n    A human readable identifier for the screen type; e.g. RNAi, cDNA, SiRNA,\n    etc. This string is likely to become an enumeration in future releases.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "reagents": {
                    "items": {
                        "$ref": "#/$defs/Reagent"
                    },
                    "name": "Reagent",
                    "title": "Reagents",
                    "type": "Element"
                },
                "plate_refs": {
                    "items": {
                        "$ref": "#/$defs/PlateRef"
                    },
                    "name": "PlateRef",
                    "title": "Plate Refs",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Screen:\\S+)|(Screen:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Name",
                    "title": "Name",
                    "type": "Attribute"
                },
                "protocol_identifier": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ProtocolIdentifier",
                    "title": "Protocol Identifier",
                    "type": "Attribute"
                },
                "protocol_description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ProtocolDescription",
                    "title": "Protocol Description",
                    "type": "Attribute"
                },
                "reagent_set_description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ReagentSetDescription",
                    "title": "Reagent Set Description",
                    "type": "Attribute"
                },
                "reagent_set_identifier": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ReagentSetIdentifier",
                    "title": "Reagent Set Identifier",
                    "type": "Attribute"
                },
                "type": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Type",
                    "title": "Type",
                    "type": "Attribute"
                }
            },
            "title": "Screen",
            "type": "object"
        },
        "Shape_FillRule": {
            "description": "The rule used to decide which parts of the shape to fill.\n\n[enumeration]",
            "enum": [
                "EvenOdd",
                "NonZero"
            ],
            "title": "Shape_FillRule",
            "type": "string"
        },
        "Shape_FontFamily": {
            "description": "The font family used to draw the text.\n\n[enumeration]\nNote: these values are all lower case so they match\nthe standard HTML/CSS values. \"fantasy\" has been\nincluded for completeness; we do not recommend its\nregular use. This attribute is under consideration\nfor removal from the OME-XML schema.",
            "enum": [
                "serif",
                "sans-serif",
                "cursive",
                "fantasy",
                "monospace"
            ],
            "title": "Shape_FontFamily",
            "type": "string"
        },
        "Shape_FontStyle": {
            "description": "The style and weight applied to the text.\n\n[enumeration] This is a simplified combination of the HTML/CSS\nattributes font-style AND font-weight.",
            "enum": [
                "Bold",
                "BoldItalic",
                "Italic",
                "Normal"
            ],
            "title": "Shape_FontStyle",
            "type": "string"
        },
        "StageLabel": {
            "description": "The StageLabel is used to specify a name and position for a stage position in\nthe microscope's reference frame.\n\nAttributes\n----------\nname : str\n    (The StageLabel Name).\nx : None | float\n    The X position of the stage label. Units are set by XUnit.\nx_unit : UnitsLength\n    The units of the X stage position - default:[reference frame].\ny : None | float\n    The Y position of the stage label. Units are set by YUnit.\ny_unit : UnitsLength\n    The units of the Y stage position - default:[reference frame].\nz : None | float\n    The Z position of the stage label. Units are set by ZUnit.\nz_unit : UnitsLength\n    The units of the Z  stage position - default:[reference frame].",
            "properties": {
                "name": {
                    "name": "Name",
                    "required": true,
                    "title": "Name",
                    "type": "Attribute"
                },
                "x": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "X",
                    "title": "X",
                    "type": "Attribute"
                },
                "x_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "XUnit",
                    "type": "Attribute"
                },
                "y": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Y",
                    "title": "Y",
                    "type": "Attribute"
                },
                "y_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "YUnit",
                    "type": "Attribute"
                },
                "z": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Z",
                    "title": "Z",
                    "type": "Attribute"
                },
                "z_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "ZUnit",
                    "type": "Attribute"
                }
            },
            "required": [
                "name"
            ],
            "title": "StageLabel",
            "type": "object"
        },
        "StructuredAnnotations": {
            "description": "An unordered collection of annotation attached to objects in the OME data\nmodel.",
            "properties": {
                "xml_annotations": {
                    "items": {
                        "$ref": "#/$defs/XMLAnnotation"
                    },
                    "name": "XMLAnnotation",
                    "title": "Xml Annotations",
                    "type": "Element"
                },
                "file_annotations": {
                    "items": {
                        "$ref": "#/$defs/FileAnnotation"
                    },
                    "name": "FileAnnotation",
                    "title": "File Annotations",
                    "type": "Element"
                },
                "list_annotations": {
                    "items": {
                        "$ref": "#/$defs/ListAnnotation"
                    },
                    "name": "ListAnnotation",
                    "title": "List Annotations",
                    "type": "Element"
                },
                "long_annotations": {
                    "items": {
                        "$ref": "#/$defs/LongAnnotation"
                    },
                    "name": "LongAnnotation",
                    "title": "Long Annotations",
                    "type": "Element"
                },
                "double_annotations": {
                    "items": {
                        "$ref": "#/$defs/DoubleAnnotation"
                    },
                    "name": "DoubleAnnotation",
                    "title": "Double Annotations",
                    "type": "Element"
                },
                "comment_annotations": {
                    "items": {
                        "$ref": "#/$defs/CommentAnnotation"
                    },
                    "name": "CommentAnnotation",
                    "title": "Comment Annotations",
                    "type": "Element"
                },
                "boolean_annotations": {
                    "items": {
                        "$ref": "#/$defs/BooleanAnnotation"
                    },
                    "name": "BooleanAnnotation",
                    "title": "Boolean Annotations",
                    "type": "Element"
                },
                "timestamp_annotations": {
                    "items": {
                        "$ref": "#/$defs/TimestampAnnotation"
                    },
                    "name": "TimestampAnnotation",
                    "title": "Timestamp Annotations",
                    "type": "Element"
                },
                "tag_annotations": {
                    "items": {
                        "$ref": "#/$defs/TagAnnotation"
                    },
                    "name": "TagAnnotation",
                    "title": "Tag Annotations",
                    "type": "Element"
                },
                "term_annotations": {
                    "items": {
                        "$ref": "#/$defs/TermAnnotation"
                    },
                    "name": "TermAnnotation",
                    "title": "Term Annotations",
                    "type": "Element"
                },
                "map_annotations": {
                    "items": {
                        "$ref": "#/$defs/MapAnnotation"
                    },
                    "name": "MapAnnotation",
                    "title": "Map Annotations",
                    "type": "Element"
                }
            },
            "title": "StructuredAnnotations",
            "type": "object"
        },
        "TagAnnotation": {
            "description": "A tag annotation (represents a tag or a tagset).",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "name": "Value",
                    "required": true,
                    "title": "Value",
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "TagAnnotation",
            "type": "object"
        },
        "TermAnnotation": {
            "description": "A ontology term annotation.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "name": "Value",
                    "required": true,
                    "title": "Value",
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "TermAnnotation",
            "type": "object"
        },
        "TiffData": {
            "description": "This described the location of the pixel data in a tiff file.\n\nAttributes\n----------\nuuid : None | \"TiffData.UUID\"\n    This must be used when the IFDs are located in another file. Note: It is\n    permissible for this to be self referential.\nifd : int\n    Gives the IFD(s) for which this element is applicable. Indexed from 0.\n    Default is 0 (the first IFD). [units:none]\nfirst_z : int\n    Gives the Z position of the image plane at the specified IFD. Indexed from\n    0. Default is 0 (the first Z position). [units:none]\nfirst_t : int\n    Gives the T position of the image plane at the specified IFD. Indexed from\n    0. Default is 0 (the first T position). [units:none]\nfirst_c : int\n    Gives the C position of the image plane at the specified IFD. Indexed from\n    0. Default is 0 (the first C position). [units:none]\nplane_count : None | int\n    Gives the number of IFDs affected. Dimension order of IFDs is given by the\n    enclosing Pixels element's DimensionOrder attribute. Default is the number\n    of IFDs in the TIFF file, unless an IFD is specified, in which case the\n    default is 1. [units:none]",
            "properties": {
                "uuid": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/UUID"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "UUID",
                    "type": "Element"
                },
                "ifd": {
                    "default": 0,
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "IFD",
                    "title": "Ifd",
                    "type": "Attribute"
                },
                "first_z": {
                    "default": 0,
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "FirstZ",
                    "title": "First Z",
                    "type": "Attribute"
                },
                "first_t": {
                    "default": 0,
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "FirstT",
                    "title": "First T",
                    "type": "Attribute"
                },
                "first_c": {
                    "default": 0,
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "FirstC",
                    "title": "First C",
                    "type": "Attribute"
                },
                "plane_count": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0,
                    "name": "PlaneCount",
                    "title": "Plane Count",
                    "type": "Attribute"
                }
            },
            "title": "TiffData",
            "type": "object"
        },
        "TimestampAnnotation": {
            "description": "A date/time annotation of type xsd:dateTime.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "format": "date-time",
                    "name": "Value",
                    "required": true,
                    "title": "Value",
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "TimestampAnnotation",
            "type": "object"
        },
        "TransmittanceRange": {
            "description": "This records the range of wavelengths that are transmitted by the filter.\n\nIt also records the maximum amount of light transmitted.\n\nAttributes\n----------\ncut_in : None | float\n    CutIn is the wavelength below which there is less than 50% transmittance\n    for a filter. Units are set by CutInUnit.\ncut_in_unit : UnitsLength\n    The units of the CutIn - default:nanometres[nm].\ncut_out : None | float\n    CutOut is the wavelength above which there is less than 50% transmittance\n    for a filter. Units are set by CutOutUnit.\ncut_out_unit : UnitsLength\n    The units of the CutOut - default:nanometres[nm].\ncut_in_tolerance : None | float\n    CutInTolerance. Units are set by CutInToleranceUnit.\ncut_in_tolerance_unit : UnitsLength\n    The units of the CutInTolerance - default:nanometres[nm].\ncut_out_tolerance : None | float\n    CutOutTolerance. Units are set by CutOutToleranceUnit.\ncut_out_tolerance_unit : UnitsLength\n    The units of the CutOutTolerance - default:nanometres[nm].\ntransmittance : None | float\n    The amount of light the filter transmits at a maximum [units:none] A\n    fraction, as a value from 0.0 to 1.0.",
            "properties": {
                "cut_in": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "CutIn",
                    "title": "Cut In",
                    "type": "Attribute"
                },
                "cut_in_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "nm",
                    "name": "CutInUnit",
                    "type": "Attribute"
                },
                "cut_out": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_exclusive": 0.0,
                    "name": "CutOut",
                    "title": "Cut Out",
                    "type": "Attribute"
                },
                "cut_out_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "nm",
                    "name": "CutOutUnit",
                    "type": "Attribute"
                },
                "cut_in_tolerance": {
                    "anyOf": [
                        {
                            "minimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0.0,
                    "name": "CutInTolerance",
                    "title": "Cut In Tolerance",
                    "type": "Attribute"
                },
                "cut_in_tolerance_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "nm",
                    "name": "CutInToleranceUnit",
                    "type": "Attribute"
                },
                "cut_out_tolerance": {
                    "anyOf": [
                        {
                            "minimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "min_inclusive": 0.0,
                    "name": "CutOutTolerance",
                    "title": "Cut Out Tolerance",
                    "type": "Attribute"
                },
                "cut_out_tolerance_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "nm",
                    "name": "CutOutToleranceUnit",
                    "type": "Attribute"
                },
                "transmittance": {
                    "anyOf": [
                        {
                            "maximum": 1.0,
                            "minimum": 0.0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "max_inclusive": 1.0,
                    "min_inclusive": 0.0,
                    "name": "Transmittance",
                    "title": "Transmittance",
                    "type": "Attribute"
                }
            },
            "title": "TransmittanceRange",
            "type": "object"
        },
        "UUID": {
            "description": "Attributes\n----------\nvalue : str\n    (The UUID value).\nfile_name : None | str\n    This can be used when the IFDs are located in another file. The / (forward\n    slash) is used as the path separator. A relative path is recommended.\n    However an absolute path can be specified. Default is to use the file the\n    ome-xml data has been pulled from. Note: It is permissible for this to be\n    self referential. The file image1.tiff may contain ome-xml data that has\n    FilePath=\"image1.tiff\" or \"./image1.tiff\"",
            "properties": {
                "value": {
                    "default": "",
                    "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
                    "required": true,
                    "title": "Value",
                    "type": "string"
                },
                "file_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "FileName",
                    "title": "File Name",
                    "type": "Attribute"
                }
            },
            "title": "UUID",
            "type": "object"
        },
        "Union": {
            "properties": {
                "labels": {
                    "items": {
                        "$ref": "#/$defs/Label"
                    },
                    "name": "Label",
                    "title": "Labels",
                    "type": "Element"
                },
                "polygons": {
                    "items": {
                        "$ref": "#/$defs/Polygon"
                    },
                    "name": "Polygon",
                    "title": "Polygons",
                    "type": "Element"
                },
                "polylines": {
                    "items": {
                        "$ref": "#/$defs/Polyline"
                    },
                    "name": "Polyline",
                    "title": "Polylines",
                    "type": "Element"
                },
                "lines": {
                    "items": {
                        "$ref": "#/$defs/Line"
                    },
                    "name": "Line",
                    "title": "Lines",
                    "type": "Element"
                },
                "ellipses": {
                    "items": {
                        "$ref": "#/$defs/Ellipse"
                    },
                    "name": "Ellipse",
                    "title": "Ellipses",
                    "type": "Element"
                },
                "points": {
                    "items": {
                        "$ref": "#/$defs/Point"
                    },
                    "name": "Point",
                    "title": "Points",
                    "type": "Element"
                },
                "masks": {
                    "items": {
                        "$ref": "#/$defs/Mask"
                    },
                    "name": "Mask",
                    "title": "Masks",
                    "type": "Element"
                },
                "rectangles": {
                    "items": {
                        "$ref": "#/$defs/Rectangle"
                    },
                    "name": "Rectangle",
                    "title": "Rectangles",
                    "type": "Element"
                }
            },
            "title": "Union",
            "type": "object"
        },
        "UnitsElectricPotential": {
            "description": "The units used to represent an electric potential.\n\nAttributes\n----------\nYOTTAVOLT : str\n    yottavolt unit.\nZETTAVOLT : str\n    zettavolt unit.\nEXAVOLT : str\n    exavolt unit.\nPETAVOLT : str\n    petavolt unit.\nTERAVOLT : str\n    teravolt unit.\nGIGAVOLT : str\n    gigavolt unit.\nMEGAVOLT : str\n    megavolt unit.\nKILOVOLT : str\n    kilovolt unit.\nHECTOVOLT : str\n    hectovolt unit.\nDECAVOLT : str\n    decavolt unit.\nVOLT : str\n    volt unit.\nDECIVOLT : str\n    decivolt unit.\nCENTIVOLT : str\n    centivolt unit.\nMILLIVOLT : str\n    millivolt unit.\nMICROVOLT : str\n    microvolt unit.\nNANOVOLT : str\n    nanovolt unit.\nPICOVOLT : str\n    picovolt unit.\nFEMTOVOLT : str\n    femtovolt unit.\nATTOVOLT : str\n    attovolt unit.\nZEPTOVOLT : str\n    zeptovolt unit.\nYOCTOVOLT : str\n    yoctovolt unit.",
            "enum": [
                "YV",
                "ZV",
                "EV",
                "PV",
                "TV",
                "GV",
                "MV",
                "kV",
                "hV",
                "daV",
                "V",
                "dV",
                "cV",
                "mV",
                "µV",
                "nV",
                "pV",
                "fV",
                "aV",
                "zV",
                "yV"
            ],
            "title": "UnitsElectricPotential",
            "type": "string"
        },
        "UnitsFrequency": {
            "description": "The units used to represent frequency.\n\nAttributes\n----------\nYOTTAHERTZ : str\n    yottahertz unit.\nZETTAHERTZ : str\n    zettahertz unit.\nEXAHERTZ : str\n    exahertz unit.\nPETAHERTZ : str\n    petahertz unit.\nTERAHERTZ : str\n    terahertz unit.\nGIGAHERTZ : str\n    gigahertz unit.\nMEGAHERTZ : str\n    megahertz unit.\nKILOHERTZ : str\n    kilohertz unit.\nHECTOHERTZ : str\n    hectohertz unit.\nDECAHERTZ : str\n    decahertz unit.\nHERTZ : str\n    hertz unit.\nDECIHERTZ : str\n    decihertz unit.\nCENTIHERTZ : str\n    centihertz unit.\nMILLIHERTZ : str\n    millihertz unit.\nMICROHERTZ : str\n    microhertz unit.\nNANOHERTZ : str\n    nanohertz unit.\nPICOHERTZ : str\n    picohertz unit.\nFEMTOHERTZ : str\n    femtohertz unit.\nATTOHERTZ : str\n    attohertz unit.\nZEPTOHERTZ : str\n    zeptohertz unit.\nYOCTOHERTZ : str\n    yoctohertz unit.",
            "enum": [
                "YHz",
                "ZHz",
                "EHz",
                "PHz",
                "THz",
                "GHz",
                "MHz",
                "kHz",
                "hHz",
                "daHz",
                "Hz",
                "dHz",
                "cHz",
                "mHz",
                "µHz",
                "nHz",
                "pHz",
                "fHz",
                "aHz",
                "zHz",
                "yHz"
            ],
            "title": "UnitsFrequency",
            "type": "string"
        },
        "UnitsLength": {
            "description": "The units used to represent a length.\n\nAttributes\n----------\nYOTTAMETER : str\n    yottameter SI unit.\nZETTAMETER : str\n    zettameter SI unit.\nEXAMETER : str\n    exameter SI unit.\nPETAMETER : str\n    petameter SI unit.\nTERAMETER : str\n    terameter SI unit.\nGIGAMETER : str\n    gigameter SI unit.\nMEGAMETER : str\n    megameter SI unit.\nKILOMETER : str\n    kilometer SI unit.\nHECTOMETER : str\n    hectometer SI unit.\nDECAMETER : str\n    decameter SI unit.\nMETER : str\n    meter SI unit.\nDECIMETER : str\n    decimeter SI unit.\nCENTIMETER : str\n    centimeter SI unit.\nMILLIMETER : str\n    millimeter SI unit.\nMICROMETER : str\n    micrometer SI unit.\nNANOMETER : str\n    nanometer SI unit.\nPICOMETER : str\n    picometer SI unit.\nFEMTOMETER : str\n    femtometer SI unit.\nATTOMETER : str\n    attometer SI unit.\nZEPTOMETER : str\n    zeptometer SI unit.\nYOCTOMETER : str\n    yoctometer SI unit.\nANGSTROM : str\n    ångström SI-derived unit.\nTHOU : str\n    thou Imperial unit (or mil, 1/1000 inch).\nLINE : str\n    line Imperial unit (1/12 inch).\nINCH : str\n    inch Imperial unit.\nFOOT : str\n    foot Imperial unit.\nYARD : str\n    yard Imperial unit.\nMILE : str\n    terrestrial mile Imperial unit.\nASTRONOMICALUNIT : str\n    astronomical unit SI-derived unit. The official term is ua as the SI\n    standard assigned AU to absorbance unit.\nLIGHTYEAR : str\n    light year.\nPARSEC : str\n    parsec.\nPOINT : str\n    typography point Imperial-derived unit (1/72 inch). Use of this unit should\n    be limited to font sizes.\nPIXEL : str\n    pixel abstract unit.  This is not convertible to any other length unit\n    without a calibrated scaling factor. Its use should should be limited to\n    ROI objects, and converted to an appropriate length units using the\n    PhysicalSize units of the Image the ROI is attached to.\nREFERENCEFRAME : str\n    reference frame abstract unit.  This is not convertible to any other length\n    unit without a scaling factor.  Its use should be limited to uncalibrated\n    stage positions, and converted to an appropriate length unit using a\n    calibrated scaling factor.",
            "enum": [
                "Ym",
                "Zm",
                "Em",
                "Pm",
                "Tm",
                "Gm",
                "Mm",
                "km",
                "hm",
                "dam",
                "m",
                "dm",
                "cm",
                "mm",
                "µm",
                "nm",
                "pm",
                "fm",
                "am",
                "zm",
                "ym",
                "Å",
                "thou",
                "li",
                "in",
                "ft",
                "yd",
                "mi",
                "ua",
                "ly",
                "pc",
                "pt",
                "pixel",
                "reference frame"
            ],
            "title": "UnitsLength",
            "type": "string"
        },
        "UnitsPower": {
            "description": "The units used to represent power.\n\nAttributes\n----------\nYOTTAWATT : str\n    yottawatt unit.\nZETTAWATT : str\n    zettawatt unit.\nEXAWATT : str\n    exawatt unit.\nPETAWATT : str\n    petawatt unit.\nTERAWATT : str\n    terawatt unit.\nGIGAWATT : str\n    gigawatt unit.\nMEGAWATT : str\n    megawatt unit.\nKILOWATT : str\n    kilowatt unit.\nHECTOWATT : str\n    hectowatt unit.\nDECAWATT : str\n    decawatt unit.\nWATT : str\n    watt unit.\nDECIWATT : str\n    deciwatt unit.\nCENTIWATT : str\n    centiwatt unit.\nMILLIWATT : str\n    milliwatt unit.\nMICROWATT : str\n    microwatt unit.\nNANOWATT : str\n    nanowatt unit.\nPICOWATT : str\n    picowatt unit.\nFEMTOWATT : str\n    femtowatt unit.\nATTOWATT : str\n    attowatt unit.\nZEPTOWATT : str\n    zeptowatt unit.\nYOCTOWATT : str\n    yoctowatt unit.",
            "enum": [
                "YW",
                "ZW",
                "EW",
                "PW",
                "TW",
                "GW",
                "MW",
                "kW",
                "hW",
                "daW",
                "W",
                "dW",
                "cW",
                "mW",
                "µW",
                "nW",
                "pW",
                "fW",
                "aW",
                "zW",
                "yW"
            ],
            "title": "UnitsPower",
            "type": "string"
        },
        "UnitsPressure": {
            "description": "The units used to represent a pressure.\n\nAttributes\n----------\nYOTTAPASCAL : str\n    yottapascal SI unit.\nZETTAPASCAL : str\n    zettapascal SI unit.\nEXAPASCAL : str\n    exapascal SI unit.\nPETAPASCAL : str\n    petapascal SI unit.\nTERAPASCAL : str\n    terapascal SI unit.\nGIGAPASCAL : str\n    gigapascal SI unit.\nMEGAPASCAL : str\n    megapascal SI unit.\nKILOPASCAL : str\n    kilopascal SI unit.\nHECTOPASCAL : str\n    hectopascal SI unit.\nDECAPASCAL : str\n    decapascal SI unit.\nPASCAL : str\n    pascal SI unit.  Note the C++ enum is mixed case due to PASCAL being a\n    macro used by the Microsoft C and C++ compiler.\nDECIPASCAL : str\n    decipascal SI unit.\nCENTIPASCAL : str\n    centipascal SI unit.\nMILLIPASCAL : str\n    millipascal SI unit.\nMICROPASCAL : str\n    micropascal SI unit.\nNANOPASCAL : str\n    nanopascal SI unit.\nPICOPASCAL : str\n    picopascal SI unit.\nFEMTOPASCAL : str\n    femtopascal SI unit.\nATTOPASCAL : str\n    attopascal SI unit.\nZEPTOPASCAL : str\n    zeptopascal SI unit.\nYOCTOPASCAL : str\n    yoctopascal SI unit.\nBAR : str\n    bar SI-derived unit.\nMEGABAR : str\n    megabar SI-derived unit.\nKILOBAR : str\n    kilobar SI-derived unit.\nDECIBAR : str\n    decibar SI-derived unit.\nCENTIBAR : str\n    centibar SI-derived unit.\nMILLIBAR : str\n    millibar SI-derived unit.\nATMOSPHERE : str\n    standard atmosphere SI-derived unit.\nPSI : str\n    pound-force per square inch Imperial unit.\nTORR : str\n    torr SI-derived unit.\nMILLITORR : str\n    millitorr SI-derived unit.\nMMHG : str\n    millimetre of mercury SI-derived unit",
            "enum": [
                "YPa",
                "ZPa",
                "EPa",
                "PPa",
                "TPa",
                "GPa",
                "MPa",
                "kPa",
                "hPa",
                "daPa",
                "Pa",
                "dPa",
                "cPa",
                "mPa",
                "µPa",
                "nPa",
                "pPa",
                "fPa",
                "aPa",
                "zPa",
                "yPa",
                "bar",
                "Mbar",
                "kbar",
                "dbar",
                "cbar",
                "mbar",
                "atm",
                "psi",
                "Torr",
                "mTorr",
                "mm Hg"
            ],
            "title": "UnitsPressure",
            "type": "string"
        },
        "UnitsTemperature": {
            "description": "The units used to represent a temperature.\n\nAttributes\n----------\nCELSIUS : str\n    degree Celsius unit.\nFAHRENHEIT : str\n    degree Fahrenheit unit.\nKELVIN : str\n    Kelvin unit.\nRANKINE : str\n    degree Rankine unit.",
            "enum": [
                "°C",
                "°F",
                "K",
                "°R"
            ],
            "title": "UnitsTemperature",
            "type": "string"
        },
        "UnitsTime": {
            "description": "The units used to represent a time interval.\n\nAttributes\n----------\nYOTTASECOND : str\n    yottasecond SI unit.\nZETTASECOND : str\n    zettasecond SI unit.\nEXASECOND : str\n    exasecond SI unit.\nPETASECOND : str\n    petasecond SI unit.\nTERASECOND : str\n    terasecond SI unit.\nGIGASECOND : str\n    gigasecond SI unit.\nMEGASECOND : str\n    megasecond SI unit.\nKILOSECOND : str\n    kilosecond SI unit.\nHECTOSECOND : str\n    hectosecond SI unit.\nDECASECOND : str\n    decasecond SI unit.\nSECOND : str\n    second SI unit.\nDECISECOND : str\n    decisecond SI unit.\nCENTISECOND : str\n    centisecond SI unit.\nMILLISECOND : str\n    millisecond SI unit.\nMICROSECOND : str\n    microsecond SI unit.\nNANOSECOND : str\n    nanosecond SI unit.\nPICOSECOND : str\n    picosecond SI unit.\nFEMTOSECOND : str\n    femtosecond SI unit.\nATTOSECOND : str\n    attosecond SI unit.\nZEPTOSECOND : str\n    zeptosecond SI unit.\nYOCTOSECOND : str\n    yoctosecond SI unit.\nMINUTE : str\n    minute SI-derived unit.\nHOUR : str\n    hour SI-derived unit.\nDAY : str\n    day SI-derived unit.",
            "enum": [
                "Ys",
                "Zs",
                "Es",
                "Ps",
                "Ts",
                "Gs",
                "Ms",
                "ks",
                "hs",
                "das",
                "s",
                "ds",
                "cs",
                "ms",
                "µs",
                "ns",
                "ps",
                "fs",
                "as",
                "zs",
                "ys",
                "min",
                "h",
                "d"
            ],
            "title": "UnitsTime",
            "type": "string"
        },
        "Value": {
            "properties": {
                "any_elements": {
                    "items": {},
                    "namespace": "##any",
                    "title": "Any Elements",
                    "type": "Wildcard"
                }
            },
            "title": "Value",
            "type": "object"
        },
        "Well": {
            "description": "A Well is a component of the Well/Plate/Screen construct to describe\nscreening applications.\n\nA Well has a number of WellSample elements that link to the Images\ncollected in this well. The ReagentRef links any Reagents that were\nused in this Well. A well is part of only one Plate. The origin for\nthe row and column identifiers is the top left corner of the plate\nstarting at zero. i.e The top left well of a plate is index (0,0)\n\nAttributes\n----------\nwell_sample : list[WellSample]\n    (The Well WellSamples).\nreagent_ref : None | ReagentRef\n    (The Well ReagentRef).\nannotation_ref : list[AnnotationRef]\n    (The Well AnnotationRefs).\nid : str\n    (The Well ID).\ncolumn : int\n    This is the column index of the well, the origin is the top left corner of\n    the plate with the first column of cells being column zero. i.e top left is\n    (0,0) The combination of Row, Column has to be unique for each well in a\n    plate.\nrow : int\n    This is the row index of the well, the origin is the top left corner of the\n    plate with the first row of wells being row zero. i.e top left is (0,0) The\n    combination of Row, Column has to be unique for each well in a plate.\nexternal_description : None | str\n    A description of the externally defined identifier for this plate.\nexternal_identifier : None | str\n    The ExternalIdentifier attribute may contain a reference to an external\n    database.\ntype : None | str\n    A human readable identifier for the screening status. e.g. empty, positive\n    control, negative control, control, experimental, etc.\ncolor : Color\n    A marker color used to highlight the well - encoded as RGBA The default\n    value \"-1\" is #FFFFFFFF so solid white (it is a signed 32 bit value) NOTE:\n    Prior to the 2012-06 schema the default value was incorrect and produced a\n    transparent red not solid white.",
            "properties": {
                "well_samples": {
                    "items": {
                        "$ref": "#/$defs/WellSample"
                    },
                    "name": "WellSample",
                    "title": "Well Samples",
                    "type": "Element"
                },
                "reagent_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ReagentRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ReagentRef",
                    "type": "Element"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Well:\\S+)|(Well:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "column": {
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "Column",
                    "required": true,
                    "title": "Column",
                    "type": "Attribute"
                },
                "row": {
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "Row",
                    "required": true,
                    "title": "Row",
                    "type": "Attribute"
                },
                "external_description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExternalDescription",
                    "title": "External Description",
                    "type": "Attribute"
                },
                "external_identifier": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ExternalIdentifier",
                    "title": "External Identifier",
                    "type": "Attribute"
                },
                "type": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Type",
                    "title": "Type",
                    "type": "Attribute"
                },
                "color": {
                    "format": "color",
                    "name": "Color",
                    "title": "Color",
                    "type": "Attribute"
                }
            },
            "required": [
                "column",
                "row"
            ],
            "title": "Well",
            "type": "object"
        },
        "WellSample": {
            "description": "WellSample is an individual image that has been captured within a Well.\n\nAttributes\n----------\nimage_ref : None | ImageRef\n    This is the main link to the core Image element\nid : str\n    (The WellSample ID).\nposition_x : None | float\n    The X position of the field (image) within the well relative to the well\n    origin defined on the Plate. Units are set by PositionXUnit.\nposition_x_unit : UnitsLength\n    The units of the position in X - default:reference frame.\nposition_y : None | float\n    The Y position of the field (image) within the well relative to the well\n    origin defined on the Plate. Units are set by PositionYUnit.\nposition_y_unit : UnitsLength\n    The units of the position in Y - default:reference frame.\ntimepoint : None | datetime\n    The time-point at which the image started to be collected\nindex : int\n    This records the order of the well samples. Each index should be unique for\n    a given plate but they do not have to be sequential, there may be gaps if\n    part of the dataset is missing. In the user interface the displayed value\n    of the index will be calculated modulo the number of PlateAcquisitions for\n    the plate.",
            "properties": {
                "image_ref": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ImageRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "ImageRef",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:WellSample:\\S+)|(WellSample:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "position_x": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "PositionX",
                    "title": "Position X",
                    "type": "Attribute"
                },
                "position_x_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "PositionXUnit",
                    "type": "Attribute"
                },
                "position_y": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "PositionY",
                    "title": "Position Y",
                    "type": "Attribute"
                },
                "position_y_unit": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UnitsLength"
                        }
                    ],
                    "default": "reference frame",
                    "name": "PositionYUnit",
                    "type": "Attribute"
                },
                "timepoint": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Timepoint",
                    "title": "Timepoint",
                    "type": "Attribute"
                },
                "index": {
                    "min_inclusive": 0,
                    "minimum": 0,
                    "name": "Index",
                    "required": true,
                    "title": "Index",
                    "type": "Attribute"
                }
            },
            "required": [
                "index"
            ],
            "title": "WellSample",
            "type": "object"
        },
        "WellSampleRef": {
            "description": "The WellSampleRef element is a reference to a WellSample element.",
            "properties": {
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:WellSample:\\S+)|(WellSample:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                }
            },
            "title": "WellSampleRef",
            "type": "object"
        },
        "XMLAnnotation": {
            "description": "An general xml annotation.\n\nThe contents of this is not processed as OME XML but should still be\nwell-formed XML.",
            "properties": {
                "description": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Description",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Description",
                    "type": "Element",
                    "white_space": "preserve"
                },
                "annotation_refs": {
                    "items": {
                        "$ref": "#/$defs/AnnotationRef"
                    },
                    "name": "AnnotationRef",
                    "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
                    "title": "Annotation Refs",
                    "type": "Element"
                },
                "id": {
                    "default": "__auto_sequence__",
                    "name": "ID",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
                    "required": true,
                    "title": "Id",
                    "type": "Attribute"
                },
                "namespace": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Namespace",
                    "title": "Namespace",
                    "type": "Attribute"
                },
                "annotator": {
                    "anyOf": [
                        {
                            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "name": "Annotator",
                    "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
                    "title": "Annotator",
                    "type": "Attribute"
                },
                "value": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/Value"
                        }
                    ],
                    "name": "Value",
                    "required": true,
                    "type": "Element"
                }
            },
            "required": [
                "value"
            ],
            "title": "XMLAnnotation",
            "type": "object"
        }
    },
    "description": "The OME element is a container for all information objects accessible by\nOME.\n\nThese information objects include descriptions of the imaging experiments\nand the people who perform them, descriptions of the microscope, the resulting\nimages and how they were acquired, the analyses performed on those images,\nand the analysis results themselves.\nAn OME file may contain any or all of this information.\nWith the creation of the Metadata Only Companion OME-XML and Binary Only OME-TIFF files\nthe top level OME node has changed slightly.\nIt can EITHER:\nContain all the previously expected elements\nOR:\nContain a single BinaryOnly element that points at\nits Metadata Only Companion OME-XML file.\n\nAttributes\n----------\nrights : None | Rights\n    (The OME Rights).\nproject : list[Project]\n    (The OME Projects).\ndataset : list[Dataset]\n    (The OME Datasets).\nfolder : list[Folder]\n    (The OME Folders).\nexperiment : list[Experiment]\n    (The OME Experiments).\nplate : list[Plate]\n    (The OME Plates).\nscreen : list[Screen]\n    (The OME Screens).\nexperimenter : list[Experimenter]\n    (The OME Experimenters).\nexperimenter_group : list[ExperimenterGroup]\n    (The OME ExperimenterGroups).\ninstrument : list[Instrument]\n    (The OME Instruments).\nimage : list[Image]\n    (The OME Images).\nstructured_annotations : None | StructuredAnnotations\n    (The OME StructuredAnnotations).\nroi : list[ROI]\n    (The OME ROIs).\nbinary_only : None | \"OME.BinaryOnly\"\n    Pointer to an external metadata file. If this element is present, then no\n    other metadata may be present in this file, i.e. this file is a place-\n    holder.\nuuid : None | str\n    This unique identifier is used to keep track of multi part files. It allows\n    the links between files to survive renaming. While OPTIONAL in the general\n    case this is REQUIRED in a MetadataOnly Companion to a collection of\n    BinaryOnly files.\ncreator : None | str\n    This is the name of the creating application of the OME-XML and preferably\n    its full version. e.g \"CompanyName, SoftwareName, V2.6.3456\" This is\n    optional but we hope it will be set by applications writing out OME-XML\n    from scratch.",
    "properties": {
        "rights": {
            "anyOf": [
                {
                    "$ref": "#/$defs/Rights"
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "name": "Rights",
            "type": "Element"
        },
        "projects": {
            "items": {
                "$ref": "#/$defs/Project"
            },
            "name": "Project",
            "title": "Projects",
            "type": "Element"
        },
        "datasets": {
            "items": {
                "$ref": "#/$defs/Dataset"
            },
            "name": "Dataset",
            "title": "Datasets",
            "type": "Element"
        },
        "folders": {
            "items": {
                "$ref": "#/$defs/Folder"
            },
            "name": "Folder",
            "title": "Folders",
            "type": "Element"
        },
        "experiments": {
            "items": {
                "$ref": "#/$defs/Experiment"
            },
            "name": "Experiment",
            "title": "Experiments",
            "type": "Element"
        },
        "plates": {
            "items": {
                "$ref": "#/$defs/Plate"
            },
            "name": "Plate",
            "title": "Plates",
            "type": "Element"
        },
        "screens": {
            "items": {
                "$ref": "#/$defs/Screen"
            },
            "name": "Screen",
            "title": "Screens",
            "type": "Element"
        },
        "experimenters": {
            "items": {
                "$ref": "#/$defs/Experimenter"
            },
            "name": "Experimenter",
            "title": "Experimenters",
            "type": "Element"
        },
        "experimenter_groups": {
            "items": {
                "$ref": "#/$defs/ExperimenterGroup"
            },
            "name": "ExperimenterGroup",
            "title": "Experimenter Groups",
            "type": "Element"
        },
        "instruments": {
            "items": {
                "$ref": "#/$defs/Instrument"
            },
            "name": "Instrument",
            "title": "Instruments",
            "type": "Element"
        },
        "images": {
            "items": {
                "$ref": "#/$defs/Image"
            },
            "name": "Image",
            "title": "Images",
            "type": "Element"
        },
        "structured_annotations": {
            "anyOf": [
                {
                    "$ref": "#/$defs/StructuredAnnotations"
                },
                {
                    "type": "null"
                }
            ],
            "name": "StructuredAnnotations",
            "type": "Element"
        },
        "rois": {
            "items": {
                "$ref": "#/$defs/ROI"
            },
            "name": "ROI",
            "title": "Rois",
            "type": "Element"
        },
        "binary_only": {
            "anyOf": [
                {
                    "$ref": "#/$defs/BinaryOnly"
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "name": "BinaryOnly",
            "type": "Element"
        },
        "uuid": {
            "anyOf": [
                {
                    "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "name": "UUID",
            "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
            "title": "Uuid",
            "type": "Attribute"
        },
        "creator": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "name": "Creator",
            "title": "Creator",
            "type": "Attribute"
        }
    },
    "title": "OME",
    "type": "object"
}