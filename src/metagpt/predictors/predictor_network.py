from pydantic import BaseModel, Field
from typing import Optional
from ome_types._autogenerated.ome_2016_06 import OME, StructuredAnnotations, XMLAnnotation
import instructor
from openai import OpenAI
import time
import sys
import importlib
import ast
from ome_types import from_xml, to_xml
from metagpt.predictors.predictor_template import PredictorTemplate
from metagpt.predictors.predictor_simple_annotator import PredictorSimpleAnnotation
from metagpt.predictors.predictor_simple import PredictorSimple
from metagpt.predictors.predictor_seperator import PredictorSeperator
import metagpt.utils.utils as utils
import numpy as np

class PredictorNetwork(PredictorTemplate):
    """
    This predictor approach uses two assistants, one for splitting the raw metadata into already contained and new metadata,
    and one for predicting the structured annotations from the new metadata.
    """
    
    def __init__(self, raw_meta: str) -> None:
        super().__init__()
        self.raw_metadata = raw_meta
        self.assistants = [
            "predictor_seperator",
            "predictor_simple_annotator",
            "predictor_simple"
        ]
    
    def predict(self) -> StructuredAnnotations:
        """
        TODO: Add docstring
        """
        print(f"Predicting for {self.name}, attempt: {self.attempts}")
        response = None

        response_sep, sep_cost, sep_attempts = PredictorSeperator(
            "Here is the raw metadata \n" + str(self.raw_metadata)).predict()
        
        if response_sep is None:
            return None, sep_cost, sep_attempts
        response_annot, response_ome = response_sep

        self.pred_response_annot, annot_cost, annot_attempts = PredictorSimpleAnnotation(
            "Here is the preselected raw metadata \n" + str(response_annot)).predict()
        
        self.pred_response_ome, ome_cost, ome_attempts = PredictorSimple(
            "Here is the preselected raw metadata \n" + str(response_ome)).predict()
        
        self.add_attempts(sep_attempts + annot_attempts + ome_attempts)

        response = utils.merge_xml_annotation(
            annot=self.pred_response_annot,
            ome=self.pred_response_ome)
        
        return response, sep_cost+annot_cost+ome_cost, self.attempts
    