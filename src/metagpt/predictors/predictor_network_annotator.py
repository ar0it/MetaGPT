from pydantic import BaseModel, Field
from typing import Optional
from ome_types._autogenerated.ome_2016_06 import OME, StructuredAnnotations, XMLAnnotation
import instructor
from openai import OpenAI
import time
import sys
import importlib
import ast
import numpy as np

from metagpt.predictors.predictor_template import PredictorTemplate
from metagpt.predictors.predictor_simple_annotator import PredictorSimpleAnnotation
from metagpt.predictors.predictor_seperator import PredictorSeperator
import metagpt.utils.utils as utils

class PredictorNetworkAnnotation(PredictorTemplate):
    """
    This predictor approach uses two assistants, one for splitting the raw metadata into already contained and new metadata,
    and one for predicting the structured annotations from the new metadata.
    """
    
    def __init__(self, raw_meta: str) -> None:
        super().__init__()
        self.raw_metadata = raw_meta
        self.assistants = [
            "predictor_seperator",
            "predictor_simple_annotator"
        ]

    
    def predict(self) -> tuple[str, float, float]:
        """
        TODO: Add docstring
        """
        print(f"Predicting for {self.name}, attempt: {self.attempts}")
        response, cost = None, None
        
        sep_response, sep_cost, sep_attempts = PredictorSeperator("Here is the raw metadata \n" + str(self.raw_metadata)).predict()
        response_annot, response_ome = sep_response

        response, pred_cost, pred_attempts = PredictorSimpleAnnotation("Here is the preselected raw metadata \n" + str(response_annot)).predict()
        
        self.add_attempts(sep_attempts + pred_attempts)

        return response, cost, self.attempts
    